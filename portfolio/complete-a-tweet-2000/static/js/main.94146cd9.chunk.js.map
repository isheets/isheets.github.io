{"version":3,"sources":["sound/shred.mp3","img/sound.svg","img/no_sound.svg","img/info.svg","sound/click.mp3","sound/success.mp3","actions/index.js","components/TweetCard/TweetContent/AuthorBlank.js","components/TweetCard/TweetContent/TweetText.js","components/TweetCard/TweetContent/TweetMedia.js","components/TweetCard/TweetContent/QuoteTweet/QuoteTweet.js","components/TweetCard/TweetContent/TweetContent.js","components/TweetCard/TweetCard.js","custom-dict/verbs.js","config/pos.js","components/TweetCard/TweetContent/WordBlank.js","utilities/ShredTweet.js","classes/FillBlank.js","classes/GuessAuthor.js","classes/GameController.js","components/TweetNav.js","components/DragWord.js","components/DragAuthor.js","components/DragOptions.js","components/Lives.js","components/Toolbar.js","components/Info.js","components/App.js","reducers/user.js","reducers/game.js","reducers/lightbox.js","reducers/ui.js","reducers/index.js","index.js","local-storage/localStorage.js","sound/print.mp3","sound/bad.mp3","sound/type.mp3"],"names":["module","exports","setDataAndInitGame","curGame","parsedFriends","parsedTweets","lastTweetFetched","type","lastTweetFetchDate","Date","now","AuthorBlank","canDrop","isOver","authorBeingDragged","drop","useDrop","accept","hover","item","monitor","collect","getItem","backgroundColor","color","width","blankName","blankHandle","author","name","handle","React","createElement","ref","className","style","TweetText","props","game","useSelector","state","textToRender","tweetToRender","classForTweetInfo","curTweet","quote","urlsToRender","quoteTweet","infoContent","header","user","console","error","text","urls","i","length","push","target","href","expanded_url","rel","key","display_url","tweetDate","date","Fragment","toLocaleTimeString","toLocaleDateString","dispatch","TweetMedia","undefined","curSlide","lightbox","slide","lbVisible","isVisible","useDispatch","tweetWithMedia","content","numMedia","mediaURLs","imgAr","hasMedia","mediaAr","media","log","url","src","alt","onClick","showSlide","slideNum","height","controls","format","FsLightbox","toggler","sources","QuoteTweet","printSound","Audio","printFile","TweetContent","soundState","ui","playSound","showOptions","pause","animateToggle","tweetIn","status","animation","animationDur","isQuote","CSSTransition","in","classNames","appear","timeout","onExited","onEntering","play","onEntered","TweetCard","gridOrder","gridSpan","verbs","posMap","JJ","JJR","JJS","NN","NNS","VB","VBD","VBG","VBN","VBP","VBZ","Blank","extractedWord","blankOrder","wordBeingDragged","order","blankFiller","value","wordInBlank","droppedWords","droppedWord","droppedIn","word","shredSound","shredFile","shredTweet","async","holder","divToSnap","document","getElementsByClassName","pieces","html2canvas","then","canvas","pieceWidth","pieceHeight","piece","classList","add","getContext","drawImage","appendChild","overflowY","display","store","getState","curTop","curWidth","opacity","animationInterval","setInterval","transform","Math","random","clearInterval","setTimeout","removeChild","currentTime","Promise","resolve","badSound","badFile","goodSound","goodFile","successSound","successFile","pos","require","tagger","Tagger","Sentencer","configure","actions","verb","floor","FillBlank","constructor","newTweet","foundWords","this","extractedWords","wordOptions","numBlanks","numDropped","lives","parent","GameController","extractWords","findAndExtractWords","getLives","newGame","handleDrop","correctDrop","newWordObj","correct","incorrectDrop","checkMovedWord","checkAlreadyDropped","wordObj","dropID","checkDone","updateGame","fail","success","animateOut","setExtractedWords","setWordOptions","setCorrect","setDone","done","serializedJson","newInstance","getRandomWords","allWordReg","RegExp","wordAr","match","extractedWordArray","numCheckedWords","numChar","numWordsToExtract","usedIdx","randIdx","getRandomUniqueIndex","checkValidWord","wordLex","Lexer","lex","wordPos","tag","mappedPos","mappedPOS","findWordsInText","foundWordArray","searchExtractedWord","concat","regSearchExtractedWord","startIdx","search","endIdx","start","end","sort","a","b","extractWordObjs","foundWord","searchFoundWord","foundWordRegex","replace","parts","split","jsxAr","curWordIdx","newGuessAuthor","randWord","make","normedWord","normalizeCap","shuffle","modelWord","normWord","character","allCaps","normedChars","charAt","isNaN","toUpperCase","toLowerCase","alert","join","array","temporaryValue","randomIndex","currentIndex","max","newIdx","includes","GuessAuthor","friendOptions","friendList","init","friends","fetchAllFriends","correctAuthor","randFriend","he","tweets","fetchNewTweets","tweetID","pickGame","shouldReturn","allTweets","firstTweet","splice","pickRandomNumber","getRandomFriends","updateTweets","newTweets","Object","keys","toast","position","autoClose","closeButton","pauseOnHover","draggable","transition","Zoom","hideProgressBar","bodyClassName","failFetchTweets","tweet","updateParsedTweets","updateStore","userDetails","userToken","twitterProvider","token","userTokenSecret","tokenSecret","fetch","headers","res","json","response","errors","parseRawTweets","catch","cursor","allUserData","fetchFriends","next_cursor","users","next_cursor_str","parseRawFriends","err","rawFriends","pic","profile_image_url","screen_name","rawTweets","retweeted_status","in_reply_to_status_id","created_at","id_str","decode","full_text","entities","extended_entities","media_url_https","video_info","variants","content_type","is_quote_status","quoted_status","unshift","clickSound","clickFile","gameController","TweetNav","message","animateAndNext","DragWord","fibGame","strike","isDragging","drag","useDrag","dropResult","getDropResult","options","dropEffect","textDecoration","DragAuthor","authorGame","time","isOverTarget","dragCoords","getSourceClientOffset","DragOptions","map","Lives","anim","strikeBounce","strikes","numIcons","Toolbar","soundStateImage","soundImage","muteImage","infoImage","Info","customStyles","top","left","right","bottom","marginRight","Modal","setAppElement","onFailedAuth","onSuccessAuth","get","updateUser","updateToken","isAuthenticated","logout","localStorage","removeItem","shredAndSkip","App","infoState","showInfo","gameAdmin","animateOptions","optionsIn","gridStyle","sixHours","img","isOpen","onRequestClose","contentLabel","overlayClassName","id","class","TwitterLogin","loginUrl","onFailure","onSuccess","requestTokenUrl","showIcon","intialUser","arguments","action","intialGame","lastFetched","intialLightbox","initialUI","combineReducers","persistedState","loadState","serializedState","parsedState","JSON","parse","gameFromJson","fromJSON","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","trace","subscribe","throttle","stringify","setItem","saveState","render","Provider","DndProvider","backend","HTML5Backend","getElementById"],"mappings":"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CA,UACA,SACA,QACA,QACA,YACA,YACA,UACA,UACA,OACA,UACA,YACA,aACA,QACA,QACA,aACA,QACA,SACA,QACA,QACA,WACA,YACA,UACA,WACA,aACA,QACA,OACA,cACA,UACA,UACA,UACA,UACA,WACA,cACA,UACA,UACA,WACA,UACA,UACA,WACA,gBACA,aACA,WACA,WACA,UACA,SACA,UACA,UACA,WACA,WACA,cACA,YACA,UACA,UACA,WACA,aACA,UACA,UACA,SACA,WACA,YACA,aACA,OACA,UACA,YACA,aACA,UACA,SACA,WACA,YACA,YACA,SACA,QACA,SACA,WACA,WACA,SACA,SACA,QACA,SACA,WACA,UACA,cACA,SACA,cACA,SACA,WACA,SACA,SACA,SACA,YACA,UACA,SACA,SACA,WACA,UACA,gBACA,SACA,YACA,WACA,WACA,eACA,UACA,WACA,UACA,UACA,cACA,cACA,aACA,YACA,WACA,QACA,OACA,OACA,OACA,OACA,UACA,SACA,QACA,SACA,YACA,YACA,SACA,SACA,YACA,UACA,WACA,UACA,UACA,YACA,SACA,SACA,SACA,QACA,YACA,YACA,QACA,YACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,SACA,WACA,aACA,UACA,UACA,UACA,SACA,UACA,cACA,YACA,aACA,cACA,UACA,OACA,SACA,WACA,YACA,MACA,QACA,WACA,YACA,UACA,UACA,SACA,QACA,QACA,OACA,UACA,UACA,SACA,QACA,WACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,OACA,YACA,OACA,OACA,WACA,aACA,SACA,YACA,SACA,UACA,YACA,cACA,WACA,QACA,gBACA,YACA,SACA,WACA,WACA,UACA,UACA,UACA,YACA,WACA,SACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,SACA,YACA,cACA,UACA,OACA,QACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,UACA,YACA,OACA,SACA,WACA,QACA,WACA,SACA,MACA,WACA,SACA,cACA,MACA,SACA,SACA,WACA,UACA,YACA,UACA,SACA,QACA,YACA,WACA,WACA,QACA,WACA,YACA,SACA,UACA,WACA,UACA,WACA,YACA,SACA,QACA,UACA,UACA,SACA,YACA,SACA,UACA,cACA,QACA,WACA,SACA,YACA,YACA,UACA,WACA,UACA,UACA,UACA,cACA,WACA,UACA,UACA,WACA,aACA,QACA,UACA,OACA,WACA,UACA,UACA,UACA,WACA,UACA,UACA,QACA,aACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YACA,UACA,WACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,OACA,SACA,SACA,YACA,YACA,YACA,SACA,WACA,UACA,UACA,SACA,QACA,SACA,WACA,WACA,eACA,YACA,SACA,UACA,UACA,UACA,SACA,QACA,aACA,SACA,UACA,SACA,YACA,WACA,UACA,UACA,UACA,UACA,WACA,SACA,WACA,SACA,SACA,SACA,SACA,aACA,QACA,SACA,OACA,OACA,WACA,SACA,SACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,OACA,WACA,WACA,SACA,OACA,UACA,QACA,OACA,QACA,YACA,aACA,UACA,QACA,QACA,cACA,QACA,YACA,aACA,aACA,aACA,aACA,YACA,QACA,SACA,eACA,aACA,UACA,YACA,YACA,SACA,UACA,UACA,SACA,UACA,YACA,aACA,cACA,WACA,OACA,SACA,SACA,QACA,OACA,YACA,OACA,WACA,OACA,OACA,QACA,QACA,QACA,QACA,aACA,WACA,YACA,YACA,WACA,YACA,YACA,SACA,QACA,SACA,cACA,QACA,UACA,YACA,QACA,SACA,SACA,UACA,SACA,MACA,UACA,WACA,QACA,SACA,OACA,QACA,YACA,WACA,YACA,QACA,QACA,MACA,WACA,UACA,QACA,QACA,MACA,OCvfaC,EAdF,CACTC,GAAI,YACJC,IAAK,YACLC,IAAK,YACLC,GAAI,OACJC,IAAK,QACLC,GAAI,O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","file":"static/js/main.94146cd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shred.0e2f27b8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound.de43e1cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/no_sound.f8f4853e.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.fa49b61e.svg\";","module.exports = __webpack_public_path__ + \"static/media/click.ecde8151.mp3\";","module.exports = __webpack_public_path__ + \"static/media/success.6ba16415.mp3\";","//called upon logout\nexport const logoutAndReset = () => ({\n  type: 'RESET'\n})\n\n//action creator for updating the value of store.user.isAuthenticated\n//expects isAuthenticated to be boolean\nexport const updateAuthentication = isAuthenticated => ({\n  type: 'SET_AUTHENTICATION',\n  isAuthenticated\n})\n\n//action creator for updating the user object in store.user.userDetails\n//user expected to be object\nexport const updateUser = user => ({\n  type: 'SET_USER',\n  user\n})\n\n//action creator for updating the token string in store.user.userToken\n//expects token to be a string\nexport const updateToken = token => ({\n  type: 'SET_TOKEN',\n  token\n})\n\nexport const setDataAndInitGame = (curGame, parsedFriends, parsedTweets, lastTweetFetched) => ({\n  type: 'INIT_GAME',\n  curGame,\n  parsedFriends,\n  parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\n//action creator for setting the value of store.tweets.lastTweetFetched for timeline fetching management\n//expects lastFetched to be a string (id of tweet)\nexport const updateLastTweetFetched = lastFetched => ({\n  type: 'SET_LAST_TWEET_FETCHED',\n  lastFetched\n})\n\n//updates array of objects for store.tweets.parsedTweets\n//expects array of objects\nexport const updateParsedTweets = (parsedTweets, lastTweetFetched) => (\n  {\n  type: 'SET_PARSED_TWEETS',\n  parsedTweets: parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\nexport const updateCurGame = curGame => ({\n  type: 'SET_CURRENT_GAME',\n  curGame\n})\n\nexport const updateParsedFriends = parsedFriends => ({\n  type: 'SET_PARSED_FRIENDS',\n  parsedFriends\n})\n\nexport const toggleLBVisible = () => ({\n  type: 'TOGGLE_LB_VISIBLE',\n})\n\nexport const setLBSlide = (slideNum) => ({\n  type: 'SET_LB_SLIDE',\n  slideNum\n})\n\nexport const tweetIn = () => ({\n  type: 'TWEET_IN_TRUE'\n})\n\nexport const tweetOut = () => ({\n  type: 'TWEET_IN_FALSE'\n})\n\nexport const optionsIn = () => ({\n  type: 'OPTIONS_IN_TRUE'\n})\n\nexport const optionsOut = () => ({\n  type: 'OPTIONS_IN_FALSE'\n})\n\nexport const playSound = () => ({\n  type: 'PLAY_SOUND'\n})\n\nexport const muteSound = () => ({\n  type: 'MUTE_SOUND'\n})\n\nexport const showInfo = () => ({\n  type: 'SHOW_INFO'\n})\n\nexport const hideInfo = () => ({\n  type: 'HIDE_INFO'\n})\n\nexport const strikeIn = () => ({\n  type: 'STRIKE_START'\n})\n\nexport const strikeOut = () => ({\n  type: 'STRIKE_STOP'\n})","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nconst AuthorBlank = () => {\n    //console.log('rendering blank');\n    const [{ canDrop, isOver, authorBeingDragged }, drop] = useDrop({\n        accept: \"author\",\n        hover: (item, monitor) => {\n            //console.log(monitor);\n        },\n        collect: monitor => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n            authorBeingDragged: monitor.getItem()\n        })\n    });\n\n    const isActive = canDrop && isOver;\n    let backgroundColor = \"transparent\";\n    let color = 'black';\n    let width = '150px';\n\n    let blankName = null;\n    let blankHandle = null;\n\n    if (isActive) {\n      backgroundColor = \"transparent\";\n      color = 'black';\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    } else if (canDrop) {\n      backgroundColor = \"#BF0404\";\n      color = backgroundColor;\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    }\n\n    return  (\n        <div ref={drop} className=\"author-blank\" >\n            <h3>&#8213;</h3><h3 className={\"author-blank-empty\"} style={{backgroundColor, color, width}}> {blankName} <span className={\"tweet-info-details\"}> {blankHandle}</span></h3>\n        </div>\n    )\n}\n\nexport default AuthorBlank;","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AuthorBlank from \"./AuthorBlank\";\n\n\nconst TweetText = props => {\n\tconst game = useSelector(state => state.game.curGame);\n\tif (game !== null) {\n\t\tlet curTweet = game.curTweet;\n\n\t\t//reset used indexes for every new tweet\n\t\t//usedIdx = [];\n\n\t\tlet quote = props.quote;\n\t\tlet textToRender;\n\t\tlet urlsToRender = [];\n\t\tlet tweetToRender;\n\t\tlet classForTweetInfo;\n\t\t//check if we need to render quote tweet info or no\n\t\tif (quote === true) {\n\t\t\ttweetToRender = curTweet.quoteTweet;\n\t\t\tclassForTweetInfo = \"quote-tweet-info\";\n\t\t}\n\t\telse {\n\t\t\ttweetToRender = curTweet;\n\t\t\tclassForTweetInfo = \"tweet-info\"\n\t\t}\n\t\tlet infoContent = null;\n\t\tlet header = null;\n\t\tif (tweetToRender !== null) {\n\t\t\tinfoContent = (\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<h3 className={classForTweetInfo + \"-name\"}>&#8213; {tweetToRender.user.name} <span className={classForTweetInfo + \"-details\"}> @{tweetToRender.user.handle}</span></h3>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\tconsole.error('no tweetToRender in TweetText')\n\t\t}\n\n\t\t//no need to extract words if it's a quote tweet\n\t\tif (quote === true) {\n\t\t\ttextToRender = curTweet.quoteTweet.text;\n\t\t\tif (curTweet.quoteTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.quoteTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.quoteTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.quoteTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//extract words and such if its a fillblank game\n\t\telse if (game.type === 'FillBlank') {\n\t\t\theader = <h2 className=\"section-title\">Complete the Tweet:</h2>\n\t\t\ttextToRender = game.textToRender;\n\t\t\t//console.log(textToRender);\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//no need to extract words if game is guess author\n\t\telse if (game.type === 'GuessAuthor') {\n\t\t\tinfoContent = <AuthorBlank />;\n\t\t\theader = <h2 className=\"section-title\">Guess the Author:</h2>\n\t\t\ttextToRender = curTweet.text;\n\t\t\turlsToRender = null;\n\t\t}\n\t\telse if (game.type === \"Complete\" || game.type === 'NoTweets') {\n\t\t\ttextToRender = curTweet.text;\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.error('Game type not recognized in TweetText');\n\t\t}\n\n\t\tlet tweetDate = new Date(tweetToRender.date)\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t{(game.type === 'FillBlank' || game.type === 'GuessAuthor') && quote !== true ?\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t{header}\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\n\t\t\t\t\t:\n\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t}\n\t\t\t</Fragment>\n\t\t);\n\t}\n\telse return null;\n};\n\nexport default TweetText;\n","import React, { Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FsLightbox from 'fslightbox-react';\n\nimport { setLBSlide, toggleLBVisible } from \"./../../../actions\";\n\nlet dispatch;\n\nvar showSlide = slide => {\n  dispatch(toggleLBVisible());\n  dispatch(setLBSlide(slide));\n};\n\nconst TweetMedia = props => {\n  let quote = props.quote;\n\n  let curGame = useSelector(state => state.game.curGame);\n  let curTweet = null;\n  if (curGame !== undefined) {\n    curTweet = curGame.curTweet;\n  }\n\n  let curSlide = useSelector(state => state.lightbox.slide);\n  let lbVisible = useSelector(state => state.lightbox.isVisible);\n\n  dispatch = useDispatch();\n  let tweetWithMedia = null;\n\n  //check if tweet with media we are rendering is quote or orginial\n\n  if (quote === true) {\n    tweetWithMedia = curTweet.quoteTweet;\n  } else {\n    tweetWithMedia = curTweet;\n  }\n  let content = null;\n\n  let numMedia = 0;\n\n  let mediaURLs = [];\n  let imgAr = [];\n  if (tweetWithMedia !== null) {\n    if (tweetWithMedia.hasMedia) {\n      const mediaAr = tweetWithMedia.media;\n      console.log(mediaAr);\n      numMedia = mediaAr.length;\n      //we have some media to render!\n      for (let i = 0; i < mediaAr.length; i++) {\n        let media = mediaAr[i];\n        console.log(media);\n        mediaURLs.push(media.url);\n        if (media.type === \"photo\" || media.type === \"animated_gif\") {\n          imgAr.push(\n            <img key={i} src={media.url} alt=\"\" className={\"tweet-media-item tweet-media-item-\" + i} onClick={() => showSlide(i)}></img>\n          );\n        } else if (media.type === \"video\") {\n          imgAr.push(\n            <video\n              width=\"426\"\n              height=\"240\"\n              controls\n              className=\"tweet-media-item fit\"\n              key={i}\n            >\n              <source src={media.url} type={media.format}></source>\n              Your browser does not support inline video viewing.\n            <a href={media.url}>Click here to view.</a>\n            </video>\n          );\n        } else {\n          console.error(\n            \"Media Type not caught in switch statement: \" + media.type\n          );\n        }\n      }\n\n      console.log(imgAr);\n      content = (\n        <div className={\"tweet-media-grid-\" + numMedia}>\n          {imgAr}\n\n          <FsLightbox toggler={lbVisible} slide={curSlide} sources={mediaURLs} />\n        </div>\n      );\n      //console.log(content);\n    } else {\n      content = null;\n    }\n  }\n  else {\n    content = null;\n  }\n  \n  console.log(content);\n\n  //return <div className={`tweet-media-${numMedia}`}>{content}</div>;\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default TweetMedia;\n","import React from 'react'\nimport TweetText from './../TweetText';\nimport TweetMedia from '../TweetMedia';\n\nconst QuoteTweet = () => {\n\n    return(\n        <div className=\"quote-tweet-grid\">\n            <div className=\"quote-tweet-content\">\n                <TweetText quote={true} />\n                <TweetMedia quote={true} />\n            </div>\n        </div>\n    )\n}\n\nexport default QuoteTweet","import React, { Fragment } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TweetText from \"./TweetText\";\nimport TweetMedia from \"./TweetMedia\";\nimport QuoteTweet from \"./QuoteTweet/QuoteTweet\";\n\nimport { CSSTransition } from 'react-transition-group';\nimport { tweetIn, optionsIn } from '../../../actions';\n\nimport printFile from './../../../sound/print.mp3';\n\n\nlet printSound = new Audio(printFile);\n\nconst TweetContent = () => {\n\n    let soundState = useSelector(state => state.ui.playSound);\n\n    const enterTransition = () => {\n        dispatch(tweetIn());\n    }\n\n    const showOptions = () => {\n        dispatch(optionsIn());\n        printSound.pause();\n    }\n\n    \n    const playSound = () => {\n        if(soundState === true) {\n            printSound.play();\n        }\n    }\n\n    let curGame = useSelector(state => state.game.curGame);\n\n    let animateToggle = useSelector(state => state.ui.tweetIn);\n\n    let dispatch = useDispatch();\n\n    let curTweet = null;\n    if (curGame !== null) {\n        curTweet = curGame.curTweet;\n        if(curGame.type === 'Complete') {\n            if(curGame.status === 'Fail') {\n                showOptions();\n                return null;\n            }\n        }\n    }\n\n    let content = null;\n\n    let animation = 'slide-up';\n    let animationDur = 1000;\n\n    if (animateToggle === false) {\n        animationDur = 200;\n    }\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n        if(curGame.type === 'Complete') {\n            animation = 'fade';\n        }\n        else if(curGame.type === 'NoTweets') {\n            return null;\n        }\n\n        //check if we need to render a quote tweet\n        if (curTweet.isQuote === true) {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                    <QuoteTweet />\n                </Fragment>\n            )\n        }\n        else {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                </Fragment>\n            )\n        }\n    }\n\n   \n\n    return (\n        <CSSTransition\n            in={animateToggle}\n            classNames={animation}\n            appear={true}\n            timeout={animationDur}\n            onExited={()=> enterTransition()}\n            onEntering={() => playSound()}\n            onEntered={() => showOptions()}\n        >\n            <div className=\"tweet-content-wrapper torn\">\n                <div className=\"tweet-content\">\n                    {content}\n                </div>\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default TweetContent","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TweetContent from \"./TweetContent/TweetContent\";\nimport \"./TweetCard.css\";\n\n\n\n\nconst TweetCard = () => {\n  //hook into state to get the current tweet to display\n  let game = useSelector(state => state.game.curGame);\n  let content;\n\n  let gridOrder = '';\n  let gridSpan = '';\n\n  if (game !== null) {\n    let curTweet = game.curTweet;\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n      //render the info and everything if its FillBlank\n      if (game.type === 'FillBlank') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n      }\n      //put in blank instead of info\n      else if (game.type === 'GuessAuthor') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        )\n      }\n      else if (game.type === 'Complete' || game.type === 'NoTweets') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n\n        gridOrder = 'second'\n        gridSpan = 'span-cols'\n      }\n      else {\n        console.error('Game type not caught in TweetCard');\n      }\n    }\n\n  }\n\n  //no tweets view\n  else {\n    content = null;\n  }\n\n  return (<div className={'tweet ' + gridOrder + \" \" + gridSpan}>{content}</div>);\n};\n\nexport default TweetCard;\n","let verbs = [\n  \"Accelerate\",\n  \"Accommodate\",\n  \"Accomplish\",\n  \"Accumulate\",\n  \"Achieve\",\n  \"Acquire\",\n  \"Act\",\n  \"Activate\",\n  \"Adapt\",\n  \"Add\",\n  \"Address\",\n  \"Adjust\",\n  \"Administer\",\n  \"Advertise\",\n  \"Advise\",\n  \"Advocate\",\n  \"Aid\",\n  \"Aide\",\n  \"Align\",\n  \"Allocate\",\n  \"Amend\",\n  \"Analyze\",\n  \"Answer\",\n  \"Anticipate\",\n  \"Apply\",\n  \"Appoint\",\n  \"Appraise\",\n  \"Approve\",\n  \"Arbitrate\",\n  \"Arrange\",\n  \"Articulate\",\n  \"Ascertain\",\n  \"Assemble\",\n  \"Assess\",\n  \"Assign\",\n  \"Assist\",\n  \"Assume\",\n  \"Attain\",\n  \"Attend\",\n  \"Attract\",\n  \"Audit\",\n  \"Augment\",\n  \"Author\",\n  \"Authorize\",\n  \"Automate\",\n  \"Avert\",\n  \"Award\",\n  \"Bargain\",\n  \"Begin\",\n  \"Bolster\",\n  \"Boost\",\n  \"Bought\",\n  \"Brief\",\n  \"Broaden\",\n  \"Budget\",\n  \"Build\",\n  \"Built\",\n  \"Calculate\",\n  \"Calibrate\",\n  \"Canvass\",\n  \"Capture\",\n  \"Care\",\n  \"Catalog\",\n  \"Catalogue\",\n  \"Categorize\",\n  \"Cater\",\n  \"Cause\",\n  \"Centralize\",\n  \"Chair\",\n  \"Charge\",\n  \"Chart\",\n  \"Check\",\n  \"Check in\",\n  \"Check out\",\n  \"Clarify\",\n  \"Classify\",\n  \"Co-operate\",\n  \"Coach\",\n  \"Code\",\n  \"Collaborate\",\n  \"Collate\",\n  \"Collect\",\n  \"Combine\",\n  \"Comfort\",\n  \"Commence\",\n  \"Communicate\",\n  \"Compare\",\n  \"Compile\",\n  \"Complete\",\n  \"Compose\",\n  \"Compute\",\n  \"Conceive\",\n  \"Conceptualize\",\n  \"Conciliate\",\n  \"Conclude\",\n  \"Condense\",\n  \"Conduct\",\n  \"Confer\",\n  \"Confirm\",\n  \"Connect\",\n  \"Conserve\",\n  \"Consider\",\n  \"Consolidate\",\n  \"Construct\",\n  \"Consult\",\n  \"Contact\",\n  \"Contract\",\n  \"Contribute\",\n  \"Control\",\n  \"Convert\",\n  \"Convey\",\n  \"Convince\",\n  \"Cooperate\",\n  \"Coordinate\",\n  \"Copy\",\n  \"Correct\",\n  \"Correlate\",\n  \"Correspond\",\n  \"Counsel\",\n  \"Create\",\n  \"Critique\",\n  \"Cultivate\",\n  \"Customize\",\n  \"Debate\",\n  \"Debug\",\n  \"Decide\",\n  \"Decrease\",\n  \"Dedicate\",\n  \"Deduce\",\n  \"Defend\",\n  \"Defer\",\n  \"Define\",\n  \"Delegate\",\n  \"Deliver\",\n  \"Demonstrate\",\n  \"Depict\",\n  \"Depreciated\",\n  \"Derive\",\n  \"Describe\",\n  \"Design\",\n  \"Detail\",\n  \"Detect\",\n  \"Determine\",\n  \"Develop\",\n  \"Devise\",\n  \"Devote\",\n  \"Diagnose\",\n  \"Diagram\",\n  \"Differentiate\",\n  \"Direct\",\n  \"Discharge\",\n  \"Disclose\",\n  \"Discover\",\n  \"Discriminate\",\n  \"Discuss\",\n  \"Dispatch\",\n  \"Display\",\n  \"Dissect\",\n  \"Disseminate\",\n  \"Distinguish\",\n  \"Distribute\",\n  \"Diversify\",\n  \"Document\",\n  \"Draft\",\n  \"Draw\",\n  \"Drew\",\n  \"Earn\",\n  \"Edit\",\n  \"Educate\",\n  \"Effect\",\n  \"Elect\",\n  \"Elicit\",\n  \"Eliminate\",\n  \"Emphasize\",\n  \"Employ\",\n  \"Enable\",\n  \"Encourage\",\n  \"Enforce\",\n  \"Engineer\",\n  \"Enhance\",\n  \"Enlarge\",\n  \"Enlighten\",\n  \"Enlist\",\n  \"Enrich\",\n  \"Ensure\",\n  \"Enter\",\n  \"Entertain\",\n  \"Enumerate\",\n  \"Equip\",\n  \"Establish\",\n  \"Estimate\",\n  \"Evaluate\",\n  \"Examine\",\n  \"Exchange\",\n  \"Execute\",\n  \"Exercise\",\n  \"Exhibit\",\n  \"Expand\",\n  \"Expedite\",\n  \"Experiment\",\n  \"Explain\",\n  \"Explore\",\n  \"Express\",\n  \"Extend\",\n  \"Extract\",\n  \"Extrapolate\",\n  \"Fabricate\",\n  \"Facilitate\",\n  \"Familiarize\",\n  \"Fashion\",\n  \"File\",\n  \"Filter\",\n  \"Finalize\",\n  \"Fine-tune\",\n  \"Fix\",\n  \"Focus\",\n  \"Forecast\",\n  \"Formulate\",\n  \"Fortify\",\n  \"Forward\",\n  \"Foster\",\n  \"Found\",\n  \"Frame\",\n  \"Fund\",\n  \"Furnish\",\n  \"Further\",\n  \"Gather\",\n  \"Gauge\",\n  \"Generate\",\n  \"Govern\",\n  \"Grade\",\n  \"Grant\",\n  \"Greet\",\n  \"Guide\",\n  \"Handle\",\n  \"Head\",\n  \"Help\",\n  \"Highlight\",\n  \"Hire\",\n  \"Host\",\n  \"Identify\",\n  \"Illustrate\",\n  \"Impart\",\n  \"Implement\",\n  \"Import\",\n  \"Improve\",\n  \"Improvise\",\n  \"Incorporate\",\n  \"Increase\",\n  \"Index\",\n  \"Individualize\",\n  \"Influence\",\n  \"Inform\",\n  \"Initiate\",\n  \"Innovate\",\n  \"Inspect\",\n  \"Inspire\",\n  \"Install\",\n  \"Institute\",\n  \"Instruct\",\n  \"Insure\",\n  \"Integrate\",\n  \"Interact\",\n  \"Interface\",\n  \"Interpret\",\n  \"Intervene\",\n  \"Interview\",\n  \"Introduce\",\n  \"Invent\",\n  \"Inventory\",\n  \"Investigate\",\n  \"Involve\",\n  \"Join\",\n  \"Judge\",\n  \"Justify\",\n  \"Label\",\n  \"Launch\",\n  \"Lead\",\n  \"Learn\",\n  \"Lecture\",\n  \"License\",\n  \"Lighten\",\n  \"Liquidate\",\n  \"List\",\n  \"Listen\",\n  \"Litigate\",\n  \"Lobby\",\n  \"Localize\",\n  \"Locate\",\n  \"Log\",\n  \"Maintain\",\n  \"Manage\",\n  \"Manufacture\",\n  \"Map\",\n  \"Market\",\n  \"Master\",\n  \"Maximize\",\n  \"Measure\",\n  \"Mechanize\",\n  \"Mediate\",\n  \"Mentor\",\n  \"Merge\",\n  \"Methodize\",\n  \"Minimize\",\n  \"Mobilize\",\n  \"Model\",\n  \"Moderate\",\n  \"Modernize\",\n  \"Modify\",\n  \"Monitor\",\n  \"Motivate\",\n  \"Narrate\",\n  \"Navigate\",\n  \"Negotiate\",\n  \"Notify\",\n  \"Nurse\",\n  \"Nurture\",\n  \"Observe\",\n  \"Obtain\",\n  \"Officiate\",\n  \"Offset\",\n  \"Operate\",\n  \"Orchestrate\",\n  \"Order\",\n  \"Organize\",\n  \"Orient\",\n  \"Orientate\",\n  \"Originate\",\n  \"Outline\",\n  \"Overhaul\",\n  \"Oversaw\",\n  \"Oversee\",\n  \"Package\",\n  \"Participate\",\n  \"Perceive\",\n  \"Perfect\",\n  \"Perform\",\n  \"Persuade\",\n  \"Photograph\",\n  \"Pilot\",\n  \"Pioneer\",\n  \"Plan\",\n  \"Practice\",\n  \"Predict\",\n  \"Prepare\",\n  \"Present\",\n  \"Preserve\",\n  \"Preside\",\n  \"Prevent\",\n  \"Print\",\n  \"Prioritize\",\n  \"Probe\",\n  \"Process\",\n  \"Produce\",\n  \"Program\",\n  \"Project\",\n  \"Promote\",\n  \"Propose\",\n  \"Provide\",\n  \"Publicize\",\n  \"Publish\",\n  \"Purchase\",\n  \"Qualify\",\n  \"Quantify\",\n  \"Quote\",\n  \"Raise\",\n  \"Ran\",\n  \"Rank\",\n  \"Rate\",\n  \"Read\",\n  \"Reason\",\n  \"Recall\",\n  \"Recognize\",\n  \"Recommend\",\n  \"Reconcile\",\n  \"Record\",\n  \"Recreate\",\n  \"Recruit\",\n  \"Rectify\",\n  \"Reduce\",\n  \"Refer\",\n  \"Refine\",\n  \"Register\",\n  \"Regulate\",\n  \"Rehabilitate\",\n  \"Reinforce\",\n  \"Relate\",\n  \"Related\",\n  \"Release\",\n  \"Remodel\",\n  \"Render\",\n  \"Renew\",\n  \"Reorganize\",\n  \"Repair\",\n  \"Replace\",\n  \"Report\",\n  \"Represent\",\n  \"Research\",\n  \"Reserve\",\n  \"Resolve\",\n  \"Respond\",\n  \"Restore\",\n  \"Restrict\",\n  \"Retain\",\n  \"Retrieve\",\n  \"Revamp\",\n  \"Reveal\",\n  \"Review\",\n  \"Revise\",\n  \"Revitalize\",\n  \"Route\",\n  \"Sample\",\n  \"Save\",\n  \"Scan\",\n  \"Schedule\",\n  \"Screen\",\n  \"Script\",\n  \"Scrutinize\",\n  \"Search\",\n  \"Secure\",\n  \"Segment\",\n  \"Select\",\n  \"Serve\",\n  \"Service\",\n  \"Settle\",\n  \"Shape\",\n  \"Share\",\n  \"Show\",\n  \"Simplify\",\n  \"Simulate\",\n  \"Sketch\",\n  \"Sold\",\n  \"Solicit\",\n  \"Solve\",\n  \"Sort\",\n  \"Speak\",\n  \"Spearhead\",\n  \"Specialize\",\n  \"Specify\",\n  \"Spoke\",\n  \"Stage\",\n  \"Standardize\",\n  \"Start\",\n  \"Stimulate\",\n  \"Straighten\",\n  \"Strategize\",\n  \"Streamline\",\n  \"Strengthen\",\n  \"Structure\",\n  \"Study\",\n  \"Submit\",\n  \"Substantiate\",\n  \"Substitute\",\n  \"Suggest\",\n  \"Summarize\",\n  \"Supervise\",\n  \"Supply\",\n  \"Support\",\n  \"Surpass\",\n  \"Survey\",\n  \"Sustain\",\n  \"Symbolize\",\n  \"Synthesize\",\n  \"Systematize\",\n  \"Tabulate\",\n  \"Tail\",\n  \"Target\",\n  \"Taught\",\n  \"Teach\",\n  \"Tend\",\n  \"Terminate\",\n  \"Test\",\n  \"Theorize\",\n  \"Time\",\n  \"Tour\",\n  \"Trace\",\n  \"Track\",\n  \"Trade\",\n  \"Train\",\n  \"Transcribe\",\n  \"Transfer\",\n  \"Transform\",\n  \"Translate\",\n  \"Transmit\",\n  \"Transport\",\n  \"Transpose\",\n  \"Travel\",\n  \"Treat\",\n  \"Triple\",\n  \"Troubleshot\",\n  \"Tutor\",\n  \"Uncover\",\n  \"Undertook\",\n  \"Unify\",\n  \"Unveil\",\n  \"Update\",\n  \"Upgrade\",\n  \"Upheld\",\n  \"Use\",\n  \"Utilize\",\n  \"Validate\",\n  \"Value\",\n  \"Verify\",\n  \"View\",\n  \"Visit\",\n  \"Visualize\",\n  \"Vitalize\",\n  \"Volunteer\",\n  \"Weigh\",\n  \"Widen\",\n  \"Win\",\n  \"Withdraw\",\n  \"Witness\",\n  \"Write\",\n  \"Xerox\",\n  \"Zap\",\n  \"Zip\"\n];\n\nexport default verbs;\n","var posMap = {\n    JJ: 'adjective',\n    JJR: 'adjective',\n    JJS: 'adjective',\n    NN: 'noun',\n    NNS: 'nouns',\n    VB: 'verb',\n    VBD: 'verb',\n    VBG: 'verb',\n    VBN: 'verb',\n    VBP: 'verb',\n    VBZ: 'verb'\n}\n\nexport default posMap;","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { useSelector } from \"react-redux\";\n\nconst Blank = props => {\n\n  //console.log('rendering blank');\n\n  let extractedWord = props.extractedWord;\n  let blankOrder = props.blankOrder;\n  let game = useSelector(state => state.game.curGame);\n\n  const [{ canDrop, isOver, wordBeingDragged }, drop] = useDrop({\n    accept: \"word\",\n    order: blankOrder,\n    drop: () => ({ name: extractedWord, order: blankOrder }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      wordBeingDragged: monitor.getItem()\n    })\n  });\n\n  let content = null;\n  let blankFiller = null;\n  let width = \"40px\";\n\n  const isActive = canDrop && isOver;\n  let backgroundColor = 'transparent';\n  let color = backgroundColor;\n  if (isActive) {\n    backgroundColor = \"transparent\";\n    color = \"black\";\n    //size all the blanks according to the word being dragged\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  } else if (canDrop) {\n    backgroundColor = \"#BF0404\";\n    color = backgroundColor;\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  }\n\n  let wordInBlank = null;\n\n  if (game !== null) {\n    let droppedWords = game.droppedWords;\n    for (let droppedWord of droppedWords) {\n      if (droppedWord.droppedIn === blankOrder) {\n        wordInBlank = droppedWord;\n      }\n    }\n  }\n\n  //render blank or filled in blank\n  if (wordInBlank !== null) {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank-filled\"\n        style={{ backgroundColor: \"transparent\", color: \"black\" }}\n      >\n        {wordInBlank.word}\n      </span>\n    );\n  } else {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank\"\n        style={{ backgroundColor, color, width }}\n      >\n        {blankFiller}\n      </span>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default Blank;\n","import html2canvas from 'html2canvas';\nimport shredFile from './../sound/shred.mp3';\nimport store from './../index';\n\nlet shredSound = new Audio(shredFile);\n\nconst shredTweet = async () => {\n\n    var divToSnap = document.getElementsByClassName('tweet')[0];\n    var pieces = [];\n    var holder;\n    html2canvas(divToSnap, {\n        backgroundColor: null\n    }).then(function async (canvas) {\n\n        let pieceWidth = canvas.width / 10;\n        var pieceHeight = canvas.height;\n\n        \n        for (let i = 0; i < 10; i++) {\n            let piece = document.createElement(\"canvas\");\n            piece.classList.add('shred-piece');\n            piece.width = pieceWidth;\n            piece.height = pieceHeight;\n\n            let pieceCtx = piece.getContext('2d');\n\n            pieceCtx.drawImage(canvas, pieceWidth * (i), 0, pieceWidth, pieceHeight, 0, 0, pieceWidth, pieceHeight);\n\n            pieces.push(piece);\n        }\n\n        holder = document.createElement(\"div\");\n        holder.classList.add('holder');\n        holder.appendChild(canvas);\n\n        canvas.classList.add('full');\n\n        document.getElementsByClassName('main-flex')[0].style.overflowY = 'visible';\n\n        document.getElementsByClassName('tweet-content-wrapper')[0].style.display = \"none\";\n        divToSnap.appendChild(holder);\n\n        for (let piece of pieces) {\n            divToSnap.appendChild(piece);\n        }\n\n        //play shred sound\n        if (store.getState().ui.playSound === true) {\n\t\t\tshredSound.play();\n\t\t}\n\n        var curTop = 0;\n        var curWidth = 10;\n        var opacity = 1;\n\n        var animationInterval = setInterval(async () => {\n            curTop = curTop + 10;\n            curWidth = curWidth - 0.05;\n            opacity = opacity - .03;\n            \n            for (let piece of pieces) {\n                piece.style.transform = \"translate(\" + (Math.random() * (4) - 2) + \"px,\" + curTop + \"%)\";\n                piece.style.width = curWidth + \"%\";\n                piece.style.opacity = opacity;\n            }\n            canvas.style.transform = \"translateY(\" + curTop + \"%)\";\n\n            if (curTop >= 110) {\n                clearInterval(animationInterval);\n                \n                for (let piece of pieces) {\n                    piece.style.opacity = 0;\n                }\n\n            }\n        }, 200);\n    });\n\n    //cleanup after animation\n    setTimeout(() => {\n        //remove the piece canvasses\n        for(let piece of pieces) {\n            divToSnap.removeChild(piece)\n        }\n\n        //stop and reset the sound\n        shredSound.pause();\n        shredSound.currentTime = 0;\n\n        //reset overflowY for main flex\n        document.getElementsByClassName('main-flex')[0].style.overflowY = 'hidden';\n        document.getElementsByClassName('tweet-content-wrapper')[0].style.display = \"block\";\n        //remove the \"full\" image canvas\n        divToSnap.removeChild(holder)\n    }, 2700)\n\n    return new Promise(resolve => setTimeout(resolve, 2700));\n\n}\n\n\nexport default shredTweet;","import React from \"react\";\nimport verbs from \"./../custom-dict/verbs\";\nimport posMap from \"./../config/pos\";\nimport Blank from \"../components/TweetCard/TweetContent/WordBlank\";\nimport GameController from \"./GameController\";\nimport store from '../index';\nimport shredTweet from './../utilities/ShredTweet';\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport { strikeIn } from \"../actions\";\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\n\nvar pos = require(\"pos\");\nvar tagger = new pos.Tagger();\n\n//get sentencer reference for generating random words basd on pos\nvar Sentencer = require(\"sentencer\");\nSentencer.configure({\n\tactions: {\n\t\tverb: function () {\n\t\t\treturn verbs[Math.floor(Math.random() * (verbs.length - 1))];\n\t\t}\n\t}\n});\n\nexport default class FillBlank {\n\tconstructor(newTweet, foundWords) {\n\t\t//call constructor from super class Game\n\t\tthis.curTweet = newTweet;\n\t\tthis.type = 'FillBlank'\n\n\t\t//FillBlank specific properties\n\t\tthis.extractedWords = []; //array of extracted word objects\n\t\tthis.wordOptions = []; //array of word options objects\n\t\tthis.numBlanks = 0;\n\t\tthis.numDropped = 0; //intially equal to zero\n\t\tthis.droppedWords = []; // array of dropped words\n\t\tthis.lives = 3;\n\t\tthis.parent = new GameController();\n\t\tif (foundWords) {\n\t\t\tthis.foundWords = foundWords;\n\t\t\tthis.textToRender = this.extractWords();\n\t\t}\n\t\telse {\n\t\t\tthis.foundWords = null;\n\t\t\tthis.textToRender = this.findAndExtractWords();\n\t\t}\n\t}\n\n\tgetLives() {\n\t\treturn this.lives;\n\t}\n\n\n\tnewGame() {\n\t\tthis.parent.newGame();\n\t}\n\n\t//takes a drop and checks if it's true\n\thandleDrop(droppedWord, droppedIn, correctDrop) {\n\t\t////console.log(\"droppedWord: \" + droppedWord + \", droppedIn: \" + droppedIn);\n\n\t\tlet newWordObj = {\n\t\t\tword: droppedWord,\n\t\t\tdroppedIn: droppedIn\n\t\t};\n\n\t\tif (droppedIn === correctDrop) {\n\t\t\tnewWordObj.correct = true;\n\t\t}\n\t\t//incorrect drop, subtract life and return false\n\t\telse {\n\t\t\tnewWordObj.correct = false;\n\t\t\treturn this.incorrectDrop();\n\t\t}\n\n\n\n\t\t//check if we already dropped the word, move it if so and stop\n\t\tif (this.checkMovedWord(droppedWord)) {\n\t\t\t//console.log(\"moved word\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\t//console.log(wordObj);\n\t\t\t\tif (wordObj.word === newWordObj.word) {\n\t\t\t\t\t//console.log(wordObj);\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//check if already filled the blank, change the word if so\n\t\telse if (this.checkAlreadyDropped(droppedIn)) {\n\t\t\t//console.log(\"already dropped\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\tif (wordObj.droppedIn === newWordObj.droppedIn) {\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//else add the word\n\t\telse {\n\t\t\tthis.droppedWords.push(newWordObj)\n\t\t}\n\n\t\treturn this.correctDrop();\n\n\t}\n\n\tcheckMovedWord(word) {\n\t\t//check to see if we have the word in our dropped word array\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.word === word) {\n\t\t\t\t//we already have the word\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//new word\n\t\treturn false;\n\t}\n\n\t//checks to see if the blank is alrFieady filled\n\t//returns true with already dropped, so need to update word\n\t//or false and need to add word\n\tcheckAlreadyDropped(dropID) {\n\t\t//check to see if we already dropped a word in this spot\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.droppedIn === dropID) {\n\t\t\t\t//we already filled the blank\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//blank is empty\n\t\treturn false\n\t}\n\n\n\n\t//handles a correct drop\n\tcorrectDrop() {\n\t\t//probably add word here\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tgoodSound.play();\n\t\t}\n\t\tlet done = this.checkDone();\n\t\tif (done) {\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t\treturn true;\n\t}\n\n\t//handles an incorrect drop\n\tincorrectDrop() {\n\t\t//subtract life\n\t\tthis.lives = this.lives - 1;\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tbadSound.play();\n\t\t}\n\t\tif (this.lives === 0) {\n\t\t\tthis.fail();\n\t\t}\n\t\telse {\n\n\t\t\t//THIS IS WHERE STRIKE ANIMATION FIRING CODE SHOULD GO\n\t\t\tstore.dispatch(strikeIn())\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t}\n\n\t//checks if we have filled all the blanks\n\tcheckDone() {\n\t\t//finally check if we've finished completing the tweet\n\t\t//console.log('checking to see if we completed the entire tweet');\n\t\tif (this.droppedWords.length === this.extractedWords.length) {\n\t\t\tthis.success();\n\t\t\treturn true;\n\t\t}\n\t\telse return false\n\t}\n\n\t//game is done and everything is correct\n\tasync success() {\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tsuccessSound.play();\n\t\t}\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Success'\n\t\tthis.parent.updateGame(this);\n\t\treturn true;\n\t}\n\n\n\n\t//game is done and not everything is correct\n\tasync fail() {\n\t\t//display some sort of failure message\n\t\t//proceed to next tweet\n\t\tthis.parent.updateGame(this);\n\t\tawait shredTweet();\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Fail'\n\t\tthis.parent.updateGame(this);\n\t}\n\n\n\t//takes an array of extracted words (objects) and updates numExtracted words\n\tsetExtractedWords(extractedWords) {\n\t\tthis.extractedWords = extractedWords;\n\t\tthis.numBlanks = extractedWords.length;\n\t}\n\n\t//takes array of word options (objects)\n\tsetWordOptions(wordOptions) {\n\t\tthis.wordOptions = wordOptions;\n\t}\n\n\t//set the correct\n\tsetCorrect(correct) {\n\t\tthis.correct = correct;\n\t}\n\n\t//set the done property\n\tsetDone(done) {\n\t\tthis.done = done;\n\t}\n\n\tstatic fromJSON(serializedJson) {\n\t\tlet newInstance = new FillBlank(serializedJson.curTweet, serializedJson.foundWords);\n\n\t\tif (newInstance.type !== 'NoWords') {\n\t\t\tnewInstance.type = 'FillBlank'\n\t\t}\n\t\tnewInstance.extractedWords = serializedJson.extractedWords; //array of extracted word objects\n\t\tnewInstance.wordOptions = serializedJson.wordOptions; //array of word options objects\n\t\tnewInstance.numBlanks = serializedJson.numBlanks;\n\t\tnewInstance.numDropped = serializedJson.numDropped; //intially equal to zero\n\t\tnewInstance.droppedWords = serializedJson.droppedWords; // array of dropped words\n\t\tnewInstance.lives = serializedJson.lives;\n\t\tnewInstance.parent = new GameController();\n\n\t\treturn newInstance;\n\t}\n\n\tfindAndExtractWords() {\n\t\treturn this.getRandomWords();\n\t}\n\n\t//pick which words we will eventually extract\n\tgetRandomWords() {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//construct regex to split string into all words\n\t\tlet allWordReg;\n\t\ttry { //try positive lookahead \n\t\t\tlet allWordExp =\n\t\t\t\t\"(?<!@)(?<=\\\\s|^|\\\\b)(?:[-’'%$#&\\\\/]\\\\b|\\\\b[-’'%$#&\\\\/]|[A-Za-z0-9]|\\\\([A-Za-z0-9]+\\\\))+(?=\\\\s|$|\\\\b)\";\n\t\t\tallWordReg = new RegExp(allWordExp, \"g\");\n\t\t}\n\t\tcatch { //revert to less robust exp if there's an error\n\t\t\tconsole.error('RegEx feature not supported, using fallback')\n\t\t\tlet allWordExp = \"([-’'%$#&\\\\/]\\\\b|\\\\b[-’'%$#&\\\\/]|[-A-Za-z0-9]|([A-Za-z0-9]+))*\"\n\t\t\tallWordReg = new RegExp(allWordExp, \"g\");\n\t\t}\n\n\n\t\t//use regex to create array of all words in tweet\n\t\tlet wordAr = text.match(allWordReg);\n\n\t\t//some issue with getting words - maybe all emojis or excalamation or something else\n\t\tif (wordAr === null) {\n\t\t\t//log an error and just return the text to avoid crash\n\t\t\tthis.type = 'NoWords';\n\t\t\treturn null;\n\t\t}\n\t\t//declare array to hold all words we extract\n\t\tlet extractedWordArray = [];\n\n\t\tlet numCheckedWords = 0;\n\n\t\t//determine how many words to extract based on number of characters\n\t\tlet numChar = text.length;\n\t\tlet numWordsToExtract = 1;\n\t\tif (numChar <= 50) {\n\t\t\tnumWordsToExtract = 1;\n\t\t} else if (numChar > 50 && numChar <= 150) {\n\t\t\tnumWordsToExtract = 2;\n\t\t} else if (numChar > 150 && numChar <= 2500) {\n\t\t\tnumWordsToExtract = 3;\n\t\t} else {\n\t\t\tnumWordsToExtract = 4;\n\t\t}\n\n\t\tusedIdx = [];\n\t\t//get 2 random words\n\t\tfor (let i = 0; i < numWordsToExtract; i++) {\n\t\t\t//get a random index and get the word at that index\n\t\t\tlet randIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\tlet extractedWord = wordAr[randIdx];\n\n\t\t\twhile (\n\t\t\t\tcheckValidWord(extractedWord, extractedWordArray) === false &&\n\t\t\t\tnumCheckedWords < wordAr.length - 1\n\t\t\t) {\n\t\t\t\trandIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\t\textractedWord = wordAr[randIdx];\n\t\t\t\tnumCheckedWords++;\n\t\t\t}\n\n\n\t\t\tif (numCheckedWords === wordAr.length - 1) {\n\t\t\t\t//console.log(\"checked all the words\");\n\t\t\t\t//can't do FIB so resort to GuessAuthor\n\t\t\t\tthis.type = 'NoWords';\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tlet wordLex = new pos.Lexer().lex(extractedWord);\n\t\t\t\tlet taggedWord = tagger.tag(wordLex);\n\t\t\t\tlet wordPos = taggedWord[0][1];\n\n\t\t\t\tlet mappedPos = posMap[wordPos];\n\n\t\t\t\textractedWordArray.push({\n\t\t\t\t\tword: extractedWord,\n\t\t\t\t\tmappedPOS: mappedPos\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\t//we picked out words, next up: find them\n\t\treturn this.findWordsInText(extractedWordArray);\n\n\n\t}\n\n\t//take the words we want to find and then....find them in the text\n\tfindWordsInText(extractedWordArray) {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//declare array to keep track of words as we find them in the tweet\n\t\tlet foundWordArray = [];\n\n\t\tfor (let word of extractedWordArray) {\n\t\t\t//construct regex to search for the current word\n\t\t\tvar searchExtractedWord = `\\\\b${word.word}\\\\b`;\n\t\t\tvar regSearchExtractedWord = new RegExp(searchExtractedWord);\n\n\t\t\t//determine the indices of beginning and end of word\n\t\t\tlet startIdx = text.search(regSearchExtractedWord);\n\t\t\tlet endIdx = startIdx + word.word.length - 1;\n\n\t\t\t//push an object containing the found indices and the word itself\n\t\t\tfoundWordArray.push({\n\t\t\t\tword: word.word,\n\t\t\t\tstart: startIdx,\n\t\t\t\tend: endIdx,\n\t\t\t\tpos: word.mappedPOS\n\t\t\t});\n\t\t}\n\n\t\t//sort the array so that smallest idx is first\n\t\tfoundWordArray.sort((a, b) => (a.start > b.start ? 1 : -1));\n\n\t\t//set property incase we need to re-extract later\n\t\t//console.log('setting foundWords')\n\t\tthis.foundWords = foundWordArray;\n\n\t\t//we have a sorted array of words we want to extract and their start/end indexes\n\t\treturn this.extractWords()\n\t}\n\n\textractWords() {\n\t\t//console.log('extractingWords');\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\tlet foundWordArray = this.foundWords;\n\n\t\tlet extractWordObjs = [];\n\n\t\t//loop through sorted found words and extract accordingly\n\t\tfor (let i = 0; i < foundWordArray.length; i++) {\n\t\t\tlet foundWord = foundWordArray[i];\n\t\t\textractWordObjs.push({\n\t\t\t\tword: foundWord.word,\n\t\t\t\torder: i,\n\t\t\t\tpos: foundWord.pos\n\t\t\t});\n\n\t\t\tvar searchFoundWord = `(\\\\b${foundWord.word})`;\n\t\t\tvar foundWordRegex = new RegExp(searchFoundWord);\n\n\t\t\t//replace the word with a blank placeholder\n\t\t\ttext = text.replace(foundWordRegex, \"*!*!%[need a blank here plzz]*!*!%\");\n\t\t\t////console.log(\"text after replace:\" + text);\n\t\t}\n\n\t\t//split text into array at seperators\n\t\tlet parts = text.split(\"*!*!%\");\n\n\t\t//array to hold all the jsx\n\t\tlet jsxAr = [];\n\n\t\t//iterator to keep track of what word we're replacing\n\t\tlet curWordIdx = 0;\n\n\t\tlet startIdx;\n\t\tif (parts[0] === '') {\n\t\t\tstartIdx = 1;\n\t\t}\n\t\telse {\n\t\t\tstartIdx = 0;\n\t\t}\n\n\t\tfor (let i = startIdx; i < parts.length; i++) {\n\t\t\t//insert fill in the blank compenent in at placeholder\n\t\t\tif (parts[i] === \"[need a blank here plzz]\") {\n\t\t\t\tjsxAr.push(\n\t\t\t\t\t<Blank\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\textractedWord={extractWordObjs[curWordIdx].word}\n\t\t\t\t\t\tblankOrder={extractWordObjs[curWordIdx].order}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t//increment curWordIdx iterator\n\t\t\t\tcurWordIdx++;\n\t\t\t}\n\t\t\t//or just put the text\n\t\t\telse {\n\t\t\t\tjsxAr.push(<span key={i}>{parts[i]}</span>);\n\t\t\t}\n\t\t}\n\n\t\tif (jsxAr.length < 2) {\n\t\t\tthis.parent.newGuessAuthor(this.curTweet);\n\t\t\treturn null;\n\t\t}\n\n\t\t//one correct word and three matching random incorrect words\n\t\tlet wordOptions = [];\n\t\tfor (let word of extractWordObjs) {\n\t\t\twordOptions.push({\n\t\t\t\tword: word.word,\n\t\t\t\torder: word.order\n\t\t\t});\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tlet randWord = Sentencer.make(`{{ ${word.pos} }}`);\n\t\t\t\tlet normedWord = normalizeCap(word.word, randWord);\n\t\t\t\twordOptions.push({\n\t\t\t\t\tword: normedWord,\n\t\t\t\t\torder: -1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\t\twordOptions = shuffle(wordOptions);\n\t\tthis.setWordOptions(wordOptions);\n\n\t\tthis.setExtractedWords(extractWordObjs);\n\n\t\t//console.log(jsxAr);\n\n\t\treturn jsxAr;\n\t}\n}\n\n//function that transforms the randomly generated word to match the case of the correct choice it corresponds to\nvar normalizeCap = (modelWord, normWord) => {\n\n\tlet character = '';\n\tlet i = 0;\n\tlet allCaps = true;\n\tlet normedChars = [];\n\twhile (i < modelWord.length) {\n\t\tcharacter = modelWord.charAt(i);\n\n\t\tif (!isNaN(character * 1)) {\n\t\t\talert('character is numeric');\n\t\t} else {\n\t\t\tif (character === character.toUpperCase()) {\n\t\t\t\t//character is uppercase\n\t\t\t\t//need to make sure normWord is not shorter than modelWord\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (character === character.toLowerCase()) {\n\t\t\t\t//character is lowercase\n\t\t\t\tallCaps = false;\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t//capitalize the rest of normWord if the model word is all caps\n\tif (allCaps === true) {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\ti++;\n\t\t}\n\t}\n\telse {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i];\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn normedChars.join('');\n}\n\nvar shuffle = (array) => {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n\n//private function to get a random index from the text word array\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n\t////console.log(\"usedIdx: \" + usedIdx);\n\tlet newIdx = Math.floor(Math.random() * Math.floor(max));\n\twhile (usedIdx.includes(newIdx) && usedIdx.length < max) {\n\t\tnewIdx = Math.floor(Math.random() * Math.floor(max));\n\t}\n\tusedIdx.push(newIdx);\n\treturn newIdx;\n};\n\n//private function to make sure the word is good\nvar checkValidWord = (word, extractedWordArray) => {\n\t//need word to be at least 2 characters\n\tif (word.length < 3) {\n\t\treturn false;\n\t}\n\t//don't get the same word twice\n\tif (extractedWordArray.includes(word)) {\n\t\treturn false;\n\t}\n\t//only want nouns, adj, and verbs\n\tlet wordLex = new pos.Lexer().lex(word);\n\tlet taggedWord = tagger.tag(wordLex);\n\tlet wordPos = taggedWord[0][1];\n\tif (\n\t\twordPos !== \"NN\" &&\n\t\twordPos !== \"NNS\" &&\n\t\twordPos !== \"JJ\" &&\n\t\twordPos !== \"JJR\" &&\n\t\twordPos !== \"JJS\" &&\n\t\twordPos !== \"VB\" &&\n\t\twordPos !== \"VBN\" &&\n\t\twordPos !== \"VBD\" &&\n\t\twordPos !== \"VBG\" &&\n\t\twordPos !== \"VBP\" &&\n\t\twordPos !== \"VBZ\"\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n","import store from './../index';\nimport GameController from './GameController';\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport { strikeIn } from '../actions';\n\nimport shredTweet from './../utilities/ShredTweet';\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\n\nexport default class GuessAuthor {\n    constructor(newTweet) {\n\n        console.log(\"constructing GuessAuthor\");\n        this.curTweet = newTweet;\n        this.type = 'GuessAuthor';\n\n        this.friendOptions = [];\n        this.lives = 3;\n\n        this.parent = new GameController();\n    }\n\n    getLives() {\n        return this.lives;\n    }\n\n    newGame() {\n        //invoke method from GameController\n        this.parent.newGame();\n    }\n\n    //return 5 random friends\n    async getRandomFriends(friendList, init) {\n        let state;\n        let friends = null;\n        if (store !== undefined) {\n            state = store.getState();\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = state.game.parsedFriends;\n            }\n        }\n        else {\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = await this.parent.fetchAllFriends();\n            }\n        }\n\n        console.log(friends);\n\n        let correctAuthor = this.curTweet.user;\n\n        correctAuthor.correct = true;\n\n        let friendOptions = [];\n\n        friendOptions.push(correctAuthor);\n\n        for (let i = 0; i < 5; i++) {\n            if (friends !== null) {\n                let randIdx = getRandomUniqueIndex(friends.length - 1);\n                let randFriend = friends[randIdx];\n                while (randFriend.handle === correctAuthor.handle) {\n                    randIdx = getRandomUniqueIndex(friends.length - 1);\n                    randFriend = friends[randIdx];\n                }\n                randFriend.correct = false;\n                friendOptions.push(randFriend);\n            }\n        }\n\n        friendOptions = shuffle(friendOptions);\n\n        this.friendOptions = friendOptions;\n\n        if (!init) {\n            this.parent.updateGame(this);\n        }\n    }\n\n\n    handleDrop(correct) {\n        //correct drop! do some things\n        if (correct) {\n            if (store.getState().ui.playSound === true) {\n                goodSound.play();\n            }\n            this.success();\n        }\n        //incorrect drop! do some other things\n        else if (!correct) {\n            this.incorrectDrop();\n        }\n    }\n\n    incorrectDrop() {\n        //subtract life\n        this.lives = this.lives - 1;\n        if (store.getState().ui.playSound === true) {\n\t\t\tbadSound.play();\n\t\t}\n        if (this.lives === 0) {\n            this.fail();\n        }\n        else {\n            //THIS IS WHERE STRIKE ANIMATION FIRING CODE SHOULD GO\n            store.dispatch(strikeIn());\n            this.parent.updateGame(this);\n        }\n    }\n\n    async success() {\n        //get the next tweet\n        if (store.getState().ui.playSound === true) {\n\t\t\tsuccessSound.play();\n\t\t}\n        await this.parent.animateOut();\n        this.status = 'Success'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n    }\n\n    async fail() {\n        //display some sort of failure message\n        //proceed to next tweet\n        this.parent.updateGame(this);\n        await shredTweet();\n        await this.parent.animateOut();\n        this.status = 'Fail'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n        \n    }\n\n    static fromJSON(serializedJson) {\n        let newInstance = new GuessAuthor(serializedJson.curTweet);\n        newInstance.parent = new GameController();\n        newInstance.type = 'GuessAuthor';\n        return newInstance;\n    }\n\n}\n\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n    let newIdx = Math.floor(Math.random() * Math.floor(max));\n    while (usedIdx.includes(newIdx) && usedIdx.length < max) {\n        newIdx = Math.floor(Math.random() * Math.floor(max));\n    }\n    usedIdx.push(newIdx);\n    return newIdx;\n};\n\nvar shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}","import FillBlank from './FillBlank';\nimport GuessAuthor from './GuessAuthor';\nimport store from '../index';\nimport {\n  updateParsedTweets,\n  updateCurGame,\n  setDataAndInitGame,\n  tweetOut,\n  optionsOut\n} from \"../actions\";\nimport { toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar he = require('he');\n\nexport default class GameController {\n\n  //fetch data and create a new game\n  async init() {\n    //console.log(\"init\")\n    let tweets = await this.fetchNewTweets();\n    let friends = await this.fetchAllFriends();\n    let newGame = await this.newGame(true, tweets, friends);\n    let lastTweetFetched = null;\n    if (tweets !== null && tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    if (newGame && tweets && friends) {\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    else {\n      if (tweets === null) {\n        newGame = {};\n        newGame.type = 'NoTweets';\n      }\n      console.error('problem in GameController.init()');\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    return Promise.resolve();\n  }\n\n  pickGame() {\n\n  }\n\n  async newGame(shouldReturn, tweets, friends) {\n    //console.log(\"creating new game\");\n    //determine FillBlank or GuessAuthor psuedo randomly and instantiate\n    let state = store.getState();\n    //get all the tweets\n    let allTweets;\n    if (tweets) {\n      //console.log('using tweets parameter');\n      allTweets = tweets;\n    }\n    else {\n      //console.log('using tweets from state')\n      allTweets = state.game.parsedTweets;\n    }\n\n    if (allTweets && allTweets.length > 0) {\n      //remove the first one and save it (will be used to create new game)\n      let firstTweet = allTweets.splice(0, 1);\n      //determine FillBlank or GuessAuthor\n      let randomNumber = pickRandomNumber();\n      let newGame;\n      if (randomNumber <= 2) {\n        //instantiate FillBlank game\n        newGame = new FillBlank(firstTweet[0])\n\n        if (newGame.type === 'NoWords') {\n          newGame = new GuessAuthor(firstTweet[0]);\n          if (friends) {\n            newGame.getRandomFriends(friends);\n          }\n          newGame.getRandomFriends();\n        }\n      }\n      else {\n        //instantiate GuessAuthor game and make sure we get some random friends\n        newGame = new GuessAuthor(firstTweet[0]);\n        if (friends) {\n          newGame.getRandomFriends(friends);\n        }\n        newGame.getRandomFriends();\n      }\n\n      if (shouldReturn === true) {\n        return newGame;\n      }\n\n      else {\n        //call methods to update the store accordingly\n        this.updateTweets(allTweets);\n        this.updateGame(newGame);\n      }\n\n\n    }\n    else {\n      //console.log(\"out of tweets, fetching more\");\n      let newTweets = await this.fetchNewTweets();\n      console.log(newTweets);\n      //console.log(newTweets);\n      if (newTweets === null || Object.keys(newTweets).length < 1) {\n        console.error('Out of tweets in GameController.newGame()');\n        if (state.game.curGame !== null) {\n          state.game.curGame.type = 'NoTweets';\n        }\n        else {\n          state.game.curGame = {};\n          state.game.curGame.type = 'NoTweets';\n        }\n        toast.error(\"NO NEW TWEETS TO FETCH\", {\n          position: \"bottom-center\",\n          autoClose: 2000,\n          closeButton: false,\n          pauseOnHover: true,\n          draggable: false,\n          transition: Zoom,\n          hideProgressBar: true,\n          className:'toast',\n          bodyClassName: 'toast-container'\n        });\n        this.updateGame(state.game.curGame);\n      }\n      else {\n        //console.log('Got ' + Object.keys(newTweets).length - 1 + ' new tweets.')\n        this.updateTweets(newTweets);\n        this.newGame();\n      }\n\n    }\n  }\n\n  //method to handle when we can't get the tweets (either bad params, rate-limited, or simply no new tweets to fetch)\n  failFetchTweets() {\n\n  }\n\n  newGuessAuthor(tweet) {\n    //console.log(\"couldn't extract words, constructing GuessAuthor\");\n\n    let newGame = new GuessAuthor(tweet);\n    newGame.getRandomFriends(undefined, true);\n\n    return // also updates the store\n  }\n\n  updateTweets(tweets) {\n    let lastTweetFetched = null;\n    if (tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    store.dispatch(updateParsedTweets(tweets, lastTweetFetched));\n  }\n\n\n  //resolves after 1 second - need to adjust to accomodate different times\n  async animateOut() {\n    store.dispatch(tweetOut());\n    store.dispatch(optionsOut());\n\n    return new Promise(resolve => setTimeout(\n      () => {\n        resolve();\n      }, 300\n    ));\n  }\n\n  updateGame(newGame) {\n\n    store.dispatch(updateCurGame(newGame));\n\n  }\n\n  async fetchNewTweets(updateStore) {\n\n    let state = store.getState();\n    //console.log(\"fetchNewTweets\");\n\n    //only fetch if we have authenticated\n    if (state.user.userDetails !== null) {\n      //get our tokens from store\n      let userToken = state.user.userDetails.twitterProvider.token;\n      let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n      //get our last tweet id from store (null if first fetch)\n      let lastTweetFetched = state.game.lastTweetFetched;\n\n      if (userToken !== null && userTokenSecret !== null) {\n        return await fetch(\n          `https://slow-twitter.appspot.com/api/v1/timeline?aT=${userToken}&aTS=${userTokenSecret}${ // make the request\n          lastTweetFetched ? `&since=${lastTweetFetched}` : ``\n          }`,\n          { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n        )\n          .then(res => res.json())\n          .then(response => {\n            //make sure response not null\n            if (response) {\n              //console.log(response);\n              if (response.errors) {\n                console.error('errors fetching new tweets');\n                return null;\n              }\n              else {\n                let parsedTweets = parseRawTweets(response);\n                //push to store\n                if (updateStore) {\n                  this.updateTweets(parsedTweets)\n                }\n                else {\n                  return parsedTweets;\n                }\n              }\n\n            }\n            else {\n              return null;\n            }\n          })\n          .catch(res => {\n            //console.log(res);\n            return null;\n          });\n      } else {\n        console.error(\"Cannot refreshFeed, bad args\");\n\n      }\n    }\n  }\n\n\n  async fetchAllFriends() {\n    let allUserData = [];\n\n    //get first page of 20 users (wait for async fetch funtion)\n    let response = await fetchFriends();\n    //console.log(response);\n    let cursor;\n\n    //get susequent pages of users\n    while (response && !response.errors && response.next_cursor !== -1) {\n      for (let user of response.users) {\n        allUserData.push(user);\n      }\n      cursor = response.next_cursor_str;\n      response = await fetchFriends(cursor);\n      //console.log(response);\n    }\n\n    //make sure we got some data\n    if (allUserData.length > 0) {\n      //send to parser function\n      let parsedFriends = parseRawFriends(allUserData);\n      //update store\n      return Promise.resolve(parsedFriends);\n    }\n    else {\n      console.error(\"allUserData empty after getAllFriends()\");\n      return Promise.resolve(null);\n    }\n  }\n\n}\n\nvar pickRandomNumber = () => {\n  return Math.floor(Math.random() * Math.floor(4));\n\n}\n\nconst fetchFriends = async (cursor) => {\n\n  let state = store.getState();\n\n  let userToken = state.user.userDetails.twitterProvider.token;\n  let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n\n  if (userToken !== null && userTokenSecret !== null) {\n    return await fetch(\n      `https://slow-twitter.appspot.com/api/v1/friends/list?aT=${userToken}&aTS=${userTokenSecret}${cursor ? `&cursor=${cursor}` : ``}`, //don't change this plz\n      { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n    )\n      .then(res => res.json())\n      .then(response => {\n        //make sure it's not null\n        if (response.errors) {\n          console.error('could not fetch response');\n          console.error(response.errors);\n          return null;\n        }\n        else return response;\n      })\n      .catch(err => {\n        console.error(err);\n        return null\n      });\n  }\n  else {\n    console.error(\"user not auth in fetchFriends()\");\n    return Promise.resolve();\n  }\n\n}\n\nvar parseRawFriends = (rawFriends) => {\n  let parsedFriends = [];\n  //make sure we got em\n  if (rawFriends) {\n    for (let user of rawFriends) {\n      parsedFriends.push({\n        name: user.name,\n        pic: user.profile_image_url,\n        handle: user.screen_name\n      });\n    }\n\n    //push to store\n    return parsedFriends;\n\n  }\n\n  else {\n    console.error(\"rawFriends empty in parseRawFriends()\")\n  }\n}\n\n//take raw response from tweets and construct well-formed object with only needed info\nconst parseRawTweets = rawTweets => {\n  let newTweets = [];\n  //first tweet will have id of 0\n  for (let tweet of rawTweets) {\n    //throw out if the tweet is a retweet\n    if (tweet.retweeted_status) {\n      //console.log(\"Tweet not parsed; is a retweet\");\n    } else if (tweet.in_reply_to_status_id !== null) {\n      //console.log(\"Tweet not parsed; is a reply\");\n    } else {\n      //construct the object\n      let newTweet = {};\n      newTweet.date = tweet.created_at;\n      newTweet.tweetID = tweet.id_str;\n      newTweet.text = he.decode(tweet.full_text); //make sure that the text is unescaped\n      newTweet.urls = null;\n      if (tweet.entities.urls.length > 0) {\n        newTweet.urls = tweet.entities.urls;\n      }\n      if (newTweet.urls !== null) {\n        for (let url of newTweet.urls) {\n          newTweet.text = newTweet.text.replace(url.url, \"\");\n        }\n      }\n\n      newTweet.user = {};\n      newTweet.user.name = tweet.user.name;\n      newTweet.user.pic = tweet.user.profile_image_url;\n      newTweet.user.handle = tweet.user.screen_name;\n\n      //check for media of any type\n      if (tweet.extended_entities) {\n        newTweet.media = [];\n        newTweet.hasMedia = true;\n        for (let i = 0; i < tweet.extended_entities.media.length; i++) {\n          newTweet.media[i] = {};\n          newTweet.media[i].type = tweet.extended_entities.media[i].type;\n          //remove the in-text media link from the tweet text\n          newTweet.text = newTweet.text.replace(\n            tweet.extended_entities.media[i].url,\n            \"\"\n          );\n          if (newTweet.media[i].type === \"photo\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].media_url_https;\n          } else if (newTweet.media[i].type === \"video\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          } else if (newTweet.media[i].type === \"animated_gif\") {\n            //render as a video\n            newTweet.media[i].type = \"video\";\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          }\n          //NEED TO CHECK FOR OTHER TYPES OF MEDIA\n        }\n      } else {\n        newTweet.hasMedia = false;\n      }\n\n      //check for quote tweet\n      if (tweet.is_quote_status === true) {\n        newTweet.isQuote = true;\n\n        newTweet.quoteTweet = {};\n        newTweet.quoteTweet.text = he.decode(tweet.quoted_status.full_text); //make sure string is unescaped\n        newTweet.quoteTweet.date = tweet.quoted_status.created_at;\n        newTweet.quoteTweet.tweetID = tweet.quoted_status.id_str;\n        newTweet.quoteTweet.urls = null;\n        if (tweet.quoted_status.entities.urls.length > 0) {\n          newTweet.quoteTweet.urls = tweet.quoted_status.entities.urls;\n        }\n        if (newTweet.quoteTweet.urls !== null) {\n          for (let url of newTweet.quoteTweet.urls) {\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(\n              url.url,\n              \"\"\n            );\n          }\n        }\n\n        newTweet.quoteTweet.user = {};\n        newTweet.quoteTweet.user.name = tweet.quoted_status.user.name;\n        newTweet.quoteTweet.user.pic =\n          tweet.quoted_status.user.profile_image_url;\n        newTweet.quoteTweet.user.handle = tweet.quoted_status.user.screen_name;\n\n        //check for quote tweet media\n        //check for media of any type\n        if (tweet.quoted_status.extended_entities) {\n          console.log(\"quoteTweet has media!\");\n          console.log(tweet.quoted_status);\n          newTweet.quoteTweet.media = [];\n          newTweet.quoteTweet.hasMedia = true;\n          for (let i = 0; i < tweet.quoted_status.extended_entities.media.length; i++) {\n            //remove the in-text media link from the tweet text\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(tweet.quoted_status.extended_entities.media[i].url, \"\");\n            newTweet.quoteTweet.media[i] = {};\n            newTweet.quoteTweet.media[i].type = tweet.quoted_status.extended_entities.media[i].type;\n            if (newTweet.quoteTweet.media[i].type === \"photo\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[i].media_url_https;\n            } else if (newTweet.quoteTweet.media[i].type === \"video\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[\n                  i\n                ].video_info.variants[0].url;\n            }\n          }\n        } else {\n          newTweet.quoteTweet.hasMedia = false;\n        }\n      } else {\n        newTweet.isQuote = false;\n      }\n\n      //put at the beginning of newTweets[] for oldest tweets first only if we have text to work with\n      if (newTweet.text.length > 0 && newTweet.isQuote === false) {\n        newTweets.unshift(newTweet);\n      } else if (newTweet.isQuote === true) {\n        if (newTweet.text.length > 0 && newTweet.quoteTweet.text.length > 0) {\n          newTweets.unshift(newTweet);\n        }\n      } else {\n        //console.log(\n          //\"TWEET PROCESSED BUT HAD NO TEXT AT THE END OF parseRawTweets()\"\n        //);\n      }\n    }\n  }\n  console.log(newTweets);\n\n  return newTweets;\n\n};","import React from 'react'\nimport GameController from './../classes/GameController';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { tweetOut, optionsOut, tweetIn } from '../actions';\n\nimport clickFile from './../sound/click.mp3';\n\nlet clickSound = new Audio(clickFile);\n\nlet gameController = new GameController();\n\nlet dispatch;\n\n\n\nlet animateAndNext = async (fail) => {\n    if(playSound === true) {\n        clickSound.play();\n    }\n    if (fail === true) {\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n            dispatch(tweetIn());\n        }, 200);\n    }\n    else {\n        dispatch(tweetOut());\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n        }, 200);\n    }\n}\n\nlet playSound = true;\n\nconst TweetNav = () => {\n\n    dispatch = useDispatch();\n\n    let curGame = useSelector(state => state.game.curGame);\n    playSound = useSelector(state => state.ui.playSound);\n\n    let message = 'Tweet completed.';\n\n    let fail = false;\n\n    if (curGame !== null) {\n        if (curGame.type === 'Complete') {\n            if (curGame.status === 'Fail') {\n                fail = true;\n                message = 'Fail. Keep moving.'\n            }\n\n        }\n    }\n\n    return (\n        <div className=\"tweet-nav-wrapper\">\n            <h2 className='tweet-nav-title'>{message}</h2>\n            <button className='tweet-nav-button small-text' onClick={() => animateAndNext(fail)}>NEXT &#x27AA;</button>\n        </div>\n    )\n}\n\nexport default TweetNav","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\n\nconst DragWord = props => {\n  let fibGame = useSelector(state => state.game.curGame);\n\n\n  const word = props.word;\n  const order = props.order;\n  let strike = false;\n  let opacity = 1;\n\n  let content = null;\n\n\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { value: word, order: order, type: \"word\" },\n    //called after word is dropped\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      //check if the item and dropResult exist\n      if (item && dropResult) {\n        strike = true;\n        //call function to check order and word correctness\n        fibGame.handleDrop(item.value, dropResult.order, item.order);\n      }\n    },\n    options: {\n      dropEffect: 'copy'\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  opacity = isDragging ? 0.4 : 1;\n\n\n  if (fibGame !== null) {\n    //check if word is one of the already dropped ones, and if so then strike it out\n    for (let wordObj of fibGame.droppedWords) {\n      if (wordObj.word === word) {\n        strike = true;\n        opacity = 0.5;\n      }\n    }\n  }\n\n  //switch strike based on whether word has been dropped\n  const textDecoration = strike ? 'line-through' : 'none';\n\n\n\n  if (word !== null) {\n    content = (\n      <div className=\"word-wrapper\">\n        <div ref={drag} style={{ opacity, textDecoration }} className=\"word-drag\">\n          {word}\n        </div>\n      </div>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default DragWord;\n","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\n\nconst DragAuthor = props => {\n    let authorGame = useSelector(state => state.game.curGame);\n\n    const name = props.name;\n    const url = props.url;\n    const handle = props.handle;\n    const time = props.time;\n    const correct = props.correct;\n\n    let content = null;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { author: { name: name, url: url, handle: handle, time: time }, correct: correct, type: \"author\" },\n        //called after word is dropped\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult();\n            //check if the item and dropResult exist\n            if (item && dropResult) {\n                //call function to check order and word correctness\n                authorGame.handleDrop(item.correct);\n            }\n        },\n        options: {\n            dropEffect: 'copy'\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n            isOver: monitor.isOverTarget(),\n            dragCoords: monitor.getSourceClientOffset()\n        })\n    });\n\n    const opacity = isDragging ? 0.4 : 1;\n\n    content = (\n        <div className=\"author-drag\" style={{opacity}}>\n            <h3 className={\"tweet-info-name\"} ref={drag}>{name} <span className={\"tweet-info-details\"}> @{handle}</span></h3>\n        </div>\n    );\n\n    return <Fragment>{content}</Fragment>\n\n}\n\nexport default DragAuthor;","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport DragWord from './DragWord';\nimport DragAuthor from './DragAuthor';\n\nconst DragOptions = () => {\n    let game = useSelector(state => state.game.curGame);\n\n    \n\n    let className = 'drag-options-container double';\n\n    let content = null;\n    if (game !== null) {\n        if (game.type === 'FillBlank') {\n            if (game.wordOptions.length > 0) {\n            \n                content =\n                    game.wordOptions.map((word, key) =>\n                        <DragWord word={word.word} order={word.order} key={key} />\n                    );\n            }\n        }\n\n        else if (game.type === \"GuessAuthor\") {\n            if (game.friendOptions.length > 0) {\n                className = 'drag-options-container'\n                content = game.friendOptions.map((user, key) => \n                    <DragAuthor key={key} name={user.name} url={user.pic} handle={user.handle} correct={user.correct} />\n                );\n                \n            }\n        }\n        else {\n            console.error(\"Game type not recognized in DragOptions\")\n        }\n    }\n\n    return (\n        <div className={className}>\n            {content}\n        </div>\n    )\n}\nexport default DragOptions","import React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { strikeOut } from './../actions';\n\n\nconst Lives = () => {\n    const curGame = useSelector(state => state.game.curGame);\n    const anim = useSelector(state => state.ui.strikeBounce);\n\n    let dispatch = useDispatch();\n\n    let content = [];\n\n\n    if (curGame !== null) {\n        content.push(<h2 className=\"lives\" key={100}>Strikes:</h2>);\n\n        let strikes = 3 - curGame.lives;\n        let numIcons = 0;\n        for (let i = 0; i < strikes; i++) {\n            content.push(\n                <CSSTransition\n                in={anim}\n                classNames='strike'\n                timeout={400}\n                onEntered={() => dispatch(strikeOut())}\n                appear={true}\n            >\n                <h2 className='strike' key={numIcons}>&#x2715;</h2>\n                </CSSTransition>\n            );\n            numIcons++;\n        }\n\n        for (let i = numIcons; i < 3; i++) {\n            content.push(<h2 className='strike-left' key={i}>&#x2715;</h2>);\n        }\n    }\n    else {\n        content = null;\n    }\n\n    return (\n\n            <div className=\"lives-wrapper\">\n                {content}\n            </div>\n\n    );\n}\nexport default Lives","import React from 'react';\nimport {playSound, muteSound, showInfo} from './../actions';\nimport {useSelector, useDispatch} from 'react-redux';\n\n\nimport soundImage from './../img/sound.svg';\nimport muteImage from './../img/no_sound.svg';\nimport infoImage from './../img/info.svg';\n\nimport clickFile from './../sound/click.mp3';\nlet clickSound = new Audio(clickFile);\n\n\nconst Toolbar = () => {\n    let soundState = useSelector(state => state.ui.playSound);\n\n    let dispatch = useDispatch();\n\n    let toggleSound = () => {\n        if(soundState === true) {\n            dispatch(muteSound());\n        }\n        else {\n            dispatch(playSound());\n            clickSound.play();\n        }\n    }\n\n    let soundStateImage;\n    if(soundState === true) {\n        soundStateImage = soundImage;\n    }\n    else {\n        soundStateImage = muteImage;\n    }\n\n    return (\n        <div className='bottom-toolbar'>\n            <img alt=\"Clickable icon to mute sound\" src={soundStateImage} className='sound-image toolbar-image' onClick={() => toggleSound()}></img>\n            <img alt=\"Clickable icon to show information about this application\" src={infoImage} className='info-image toolbar-image' onClick={() => {\n                    if(soundState === true) {\n                        clickSound.play();\n                    }\n                    dispatch(showInfo())\n                }}></img>\n        </div>\n    );\n}\n\nexport default Toolbar;","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideInfo } from './../actions';\n\nimport clickFile from './../sound/click.mp3';\nlet clickSound = new Audio(clickFile);\n\nconst Info = () => {\n    let soundState = useSelector(state => state.ui.playSound);\n    let dispatch = useDispatch();\n    return (\n        <Fragment>\n            <h2 className='info-title'>About this Site</h2>\n            \n            <p className='info-p'>My name is Isaac Sheets and I developed Complete-a-Tweet 2000 as a commentary on the usage of infinite scroll on Twitter. Infinite scroll provides easy access to unlimited content and the user is never forced to take a step back and decide if they want to continue - the content is easy to get so it has less weight.</p>\n            <p className='info-p'>To reverse this concept, Complete-a-Tweet 2000 slows down the interaction for the user and prompts them to actually engage with the content they see. The result is that the user can make a more intentional decision about the content the consume and the time they invest.</p>\n            <a className='info-link' target='_blank' rel=\"noopener noreferrer\" href='http://creative.colorado.edu/~issh3780/'>&#x2197; Check out my other work</a>\n            <a className='info-link' target='_blank' rel=\"noopener noreferrer\" href='https://www.linkedin.com/in/isaacsheets1'>&#x2197; Find me on LinkedIn</a>\n            <button className='small-text info-close-button' onClick={() => {\n                if(soundState === true) {\n                    clickSound.play();\n                }\n                dispatch(hideInfo())\n                }}>CLOSE</button>\n        </Fragment>\n    )\n}\n\nexport default Info;","import React, { Fragment } from \"react\";\nimport TwitterLogin from \"react-twitter-auth\";\nimport {\n  updateAuthentication,\n  updateToken,\n  updateUser,\n  logoutAndReset,\n  hideInfo,\n  optionsOut,\n  tweetIn,\n  tweetOut\n} from \"./../actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from 'react-modal';\n\nimport TweetCard from \"./TweetCard/TweetCard\";\nimport TweetNav from \"./TweetNav\";\nimport DragOptions from \"./DragOptions\";\nimport Lives from './Lives';\n\nimport GameController from '../classes/GameController';\nimport shredTweet from './../utilities/ShredTweet';\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport clickFile from './../sound/click.mp3';\nimport printFile from './../sound/print.mp3';\nimport successFile from './../sound/success.mp3';\nimport Toolbar from \"./Toolbar\";\nimport Info from \"./Info\";\n\nconst customStyles = {\n  content: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nModal.setAppElement('#root')\n\nlet clickSound = new Audio(clickFile);\nlet printSound = new Audio(printFile);\nlet successSound = new Audio(successFile);\n\nlet dispatch;\n\nlet gameController = new GameController();\n\nconst onFailedAuth = error => {\n  //console.log(\"Twitter auth failed :(\");\n  console.error(error);\n};\n\nconst onSuccessAuth = async (response) => {\n  const token = response.headers.get(\"x-auth-token\");\n  //console.log(response);\n  response.json().then(async user => {\n    //successful auth, update store\n    if (token) {\n      //console.log(\"User auth successful :)\");\n      if (playSound) {\n        successSound.play();\n      }\n\n      //dispatch the user object to store\n      dispatch(updateUser(user));\n      //dispatch the token to store\n      dispatch(updateToken(token));\n      //dispatch action to update authentication to store\n      dispatch(updateAuthentication(true));\n\n    }\n  });\n};\n\nconst logout = () => {\n  if (playSound) {\n    clickSound.play();\n  }\n\n  //set state to initial\n  dispatch(logoutAndReset());\n  //clear cache\n  localStorage.removeItem('state');\n}\n\nlet playSound = true;\nconst App = () => {\n  //get current state\n  const user = useSelector(state => state.user);\n  const game = useSelector(state => state.game);\n  let infoState = useSelector(state => state.ui.showInfo);\n  playSound = useSelector(state => state.ui.playSound);\n\n  let animateOptions = useSelector(state => state.ui.optionsIn);\n\n  let gameAdmin;\n  let gridStyle = 'main-grid';\n  let gridSpan = '';\n\n  let animation = 'fade';\n  let animationDur = 400;\n\n  if (animateOptions === false) {\n    animationDur = 200;\n  }\n\n  let playPrintSound = () => {\n    if (playSound) {\n      printSound.play();\n    }\n  }\n\n\n  if (user.isAuthenticated === true) {\n    if (game.curGame !== null) {\n      //we have a game\n      const sixHours = 6 * 60 * 60 * 1000;\n      if (Date.now() - game.lastTweetFetchDate > sixHours) {\n        //console.log(\"last fetched more than six hours ago, re-fetching and creating new game now now\")\n        gameController.init();\n\n        game.curGame = null;\n      }\n\n      //show some administration like next button or refresh\n      else if (game.curGame.type === 'Complete') {\n        animation = 'scale';\n        animationDur = 200;\n        gameAdmin = (<TweetNav />);\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n      else if (game.curGame.type === 'NoTweets') {\n        //this should probably be a new component\n        animation = 'none';\n        gameAdmin = (\n          <div className='no-new-tweets'>\n            <h2>No new tweets to fetch.</h2>\n            <h3>Try again later.</h3>\n            <button\n              onClick={() => {\n                if (playSound) {\n                  clickSound.play();\n                }\n                gameController.newGame();\n              }}\n              className=\"button\"\n            >\n              RETRY\n          </button>\n          </div>\n        );\n\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n    }\n    else {\n      gameController.init();\n    }\n  }\n\n\n  //check to see if we need to refresh\n\n  //init reference to dispatch\n  dispatch = useDispatch();\n\n\n  let content = null;\n\n  //console.log(\"using \" + animation + ' for options animation');\n\n  if (user.isAuthenticated && game.curGame !== null) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>COMPLETE-A-TWEET 2000</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile avatar' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div className={\"main-flex \" + gridStyle}>\n          <TweetCard />\n          <CSSTransition\n            in={animateOptions}\n            classNames={animation}\n            timeout={animationDur}\n            appear={true}\n          >\n            <div className={\"main-grid-col-2 \" + gridSpan + \" \" + animation}>\n              {game.curGame.type === 'Complete' || game.curGame.type === 'NoTweets' ?\n                <Fragment>\n                  <div className=\"span\">{gameAdmin}</div>\n                </Fragment>\n                :\n                <Fragment>\n                  <DragOptions />\n                  <Lives />\n                  <button className=\"small-text\" onClick={() => shredAndSkip()}>SHRED</button>\n                </Fragment>\n              }\n            </div>\n          </CSSTransition>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n    );\n\n  }\n\n  //loading after authentication\n  else if (user.isAuthenticated) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>COMPLETE-A-TWEET 2000</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile avatar' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div id=\"noTrespassingOuterBarG\">\n          <div id=\"noTrespassingFrontBarG\" class=\"noTrespassingAnimationG\">\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n          </div>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n    );\n\n  }\n\n  //initial view not signed in\n  else {\n    content = (\n      <div className=\"page-wrapper\">\n        <CSSTransition\n          in={true}\n          classNames={'fade-slow'}\n          timeout={1000}\n          appear={true}\n        >\n          <div className=\"top-bar\">\n            <div className=\"title\">\n              <h1>COMPLETE-A-TWEET 2000</h1>\n            </div>\n            <div className=\"user-info\">\n              <TwitterLogin\n                loginUrl=\"https://slow-twitter.appspot.com/api/v1/auth/twitter\" //second step\n                onFailure={onFailedAuth}\n                onSuccess={onSuccessAuth}\n                requestTokenUrl=\"https://slow-twitter.appspot.com/api/v1/auth/twitter/reverse\" //first step\n                className=\"twitter-login-button small-text\"\n                text=\"SIGN IN TO TWITTER\"\n                showIcon={false}\n              />\n            </div>\n          </div>\n        </CSSTransition>\n        <div className={\"main-flex rel\"}>\n          <CSSTransition\n            in={true}\n            classNames={'slide-up-slow'}\n            appear={true}\n            timeout={2000}\n            onEntering={() => playPrintSound()}\n            onEntered={() => printSound.pause()}\n          >\n            <div className=\"welcome-message-wrapper\">\n              <div className=\"welcome-message\">\n                <h2 className='section-title'>Welcome to Complete-a-Tweet 2000.</h2>\n                <p>This site will transform your Twitter feed into a series of mini-games.</p>\n                <p>Login to your Twitter account get started.</p>\n              </div>\n            </div>\n          </CSSTransition>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n\n    );\n  }\n\n\n\n  return <Fragment>{content}</Fragment>;\n};\n\nvar shredAndSkip = async () => {\n\n  if(playSound) {\n    clickSound.play();\n  }\n  //wait for the tweet to shred\n  await shredTweet();\n  dispatch(optionsOut());\n  dispatch(tweetOut());\n  setTimeout(function () {\n      gameController.newGame();\n      dispatch(tweetIn());\n  }, 200);\n\n}\n\nexport default App;\n","const intialUser = {\n    isAuthenticated: false,\n    userDetails: null,\n    userToken: null\n}\n\nconst user = (state = intialUser, action) => {\n    switch(action.type) {\n        case 'RESET':\n            return intialUser\n        case 'SET_AUTHENTICATION':\n            return {\n                ...state,\n                isAuthenticated: action.isAuthenticated\n            }\n        case 'SET_USER':\n            return {\n                ...state,\n                userDetails: action.user\n\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                userToken: action.token\n            }\n        default:\n            return state\n    }\n}\n\nexport default user","const intialGame = {\n  lastTweetFetched: null,\n  parsedTweets: null,\n  curGame: null,\n  parsedFriends: null,\n  lastTweetFetchDate: null\n};\n\nconst game = (state = intialGame, action) => {\n  switch (action.type) {\n    case 'RESET':\n      return intialGame;\n    case \"INIT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame,\n        parsedFriends: action.parsedFriends,\n        parsedTweets: action.parsedTweets,\n        lastTweetFetchDate: action.lastTweetFetchDate,\n        lastTweetFetched: action.lastTweetFetched\n      }\n    case \"SET_CURRENT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame\n      };\n    case \"SET_LAST_TWEET_FETCHED\":\n      return {\n        ...state,\n        lastTweetFetched: action.lastFetched\n      };\n    case \"SET_PARSED_TWEETS\":\n      if (action.lastTweetFetched === null) {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate\n        };\n      }\n      else {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate,\n          lastTweetFetched: action.lastTweetFetched\n        };\n      }\n    case \"SET_PARSED_FRIENDS\":\n      return {\n        ...state,\n        parsedFriends: action.parsedFriends\n      };\n    default:\n      return state;\n  }\n};\n\nexport default game;","const intialLightbox = {\n    isVisible: false,\n    slide: 0\n  };\n  \n  const lightbox = (state = intialLightbox, action) => {\n    switch (action.type) {\n      case 'RESET':\n        return intialLightbox;\n      case \"TOGGLE_LB_VISIBLE\":\n        return {\n          ...state,\n          isVisible: !state.isVisible \n        };\n        case \"SET_LB_SLIDE\":\n        return {\n          ...state,\n          slide: action.slideNum\n        };\n     \n      default:\n        return state;\n    }\n  };\n  \n  export default lightbox;\n  ","const initialUI = {\n    tweetIn: true,\n    optionsIn: false,\n    showInfo: false,\n    playSound: true,\n    strikeBounce: false\n}\n\nconst ui = (state = initialUI, action) => {\n    switch (action.type) {\n        case 'RESET':\n            return initialUI;\n        case 'TWEET_IN_TRUE':\n            return {\n                ...state,\n                tweetIn: true\n            }\n        case 'TWEET_IN_FALSE':\n            return {\n                ...state,\n                tweetIn: false\n            }\n        case 'OPTIONS_IN_TRUE':\n            return {\n                ...state,\n                optionsIn: true\n\n            }\n        case 'OPTIONS_IN_FALSE':\n            return {\n                ...state,\n                optionsIn: false\n\n            }\n        case 'SHOW_INFO':\n            return {\n                ...state,\n                showInfo: true\n            }\n        case 'HIDE_INFO':\n            return {\n                ...state,\n                showInfo: false\n            }\n        case 'PLAY_SOUND':\n            return {\n                ...state,\n                playSound: true\n            }\n        case 'MUTE_SOUND':\n            return {\n                ...state,\n                playSound: false\n            }\n        case 'STRIKE_START':\n            return {\n                ...state,\n                strikeBounce: true\n            }\n        case 'STRIKE_STOP':\n            return {\n                ...state,\n                strikeBounce: false\n            }\n        default:\n            return state\n    }\n}\n\nexport default ui","import { combineReducers } from 'redux'\nimport user from './user'\nimport game from './game'\nimport lightbox from './lightbox'\nimport ui from './ui'\n\nexport default combineReducers({\n  user,\n  game,\n  lightbox,\n  ui\n})","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { toast } from 'react-toastify';\n\nimport { loadState, saveState } from \"./local-storage/localStorage\";\nimport throttle from \"lodash.throttle\";\n\nlet persistedState = loadState();\nconsole.log(persistedState);\nlet store;\n\ntoast.configure();\n\n//use persisted state if avail\nif (persistedState !== undefined) {\n\n  store = createStore(\n    rootReducer,\n    persistedState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n\n} \n//no state in local storage\nelse {\n  store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n}\n\nexport default store;\n\n//save state a maximum of once every second\nstore.subscribe(\n  throttle(() => {\n    saveState({\n      game: store.getState().game,\n      user: store.getState().user,\n      ui: store.getState().ui\n    });\n  }, 1000)\n);\n\nrender(\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);","import FillBlank from './../classes/FillBlank';\nimport GuessAuthor from '../classes/GuessAuthor';\n\nexport const loadState = () => {\n  //console.log(\"ATTEMPTING TO LOAD STATE\");\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    let parsedState = JSON.parse(serializedState);\n    //console.log(parsedState);\n    //need to reconstruct the class instance based on persisted properties if it exists\n    if (parsedState.game.curGame !== null) {\n      let gameFromJson = {};\n      if (parsedState.game.curGame.type === 'FillBlank') {\n        gameFromJson = FillBlank.fromJSON(parsedState.game.curGame);\n        //console.log(gameFromJson);\n        if(gameFromJson.type === 'NoWords') {\n          gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n          gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n        }\n      }\n      else if(parsedState.game.curGame.type === 'NoWords') {\n        //console.log('game type is NoWords, constructing GuessAuthor');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if (parsedState.game.curGame.type === 'GuessAuthor') {\n        //console.log('constructing new GuessAuthor game');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if(parsedState.game.curGame.type === 'Complete') {\n        gameFromJson.type = 'Complete';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n        gameFromJson.status = parsedState.game.curGame.status;\n      }\n      else if(parsedState.game.curGame.type === 'NoTweets') {\n        gameFromJson.type = 'NoTweets';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n      }\n      else {\n        console.error(\"Game type not caught in localStorage.js\");\n      }\n\n      parsedState.game.curGame = gameFromJson;\n    }\n    return parsedState;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  //console.log(\"ATTEMPTING TO SAVE STATE\");\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};","module.exports = __webpack_public_path__ + \"static/media/print.1d3d03ec.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bad.ef6e1241.mp3\";","module.exports = __webpack_public_path__ + \"static/media/type.92cc9868.mp3\";"],"sourceRoot":""}