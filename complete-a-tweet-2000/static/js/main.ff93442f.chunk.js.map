{"version":3,"sources":["sound/shred.mp3","img/sound.svg","img/no_sound.svg","img/info.svg","sound/click.mp3","components/TweetCard/TweetContent/TweetMedia.js","actions/index.js","components/TweetCard/TweetContent/AuthorBlank.js","components/TweetCard/TweetContent/TweetText.js","components/TweetCard/TweetContent/QuoteTweet/QuoteTweet.js","components/TweetCard/TweetContent/TweetContent.js","components/TweetCard/TweetCard.js","custom-dict/verbs.js","config/pos.js","components/TweetCard/TweetContent/WordBlank.js","utilities/ShredTweet.js","classes/FillBlank.js","components/TweetNav.js","classes/GuessAuthor.js","classes/GameController.js","components/DragWord.js","components/DragAuthor.js","components/DragOptions.js","components/Lives.js","components/Toolbar.js","components/Info.js","components/App.js","reducers/user.js","reducers/game.js","reducers/lightbox.js","reducers/ui.js","index.js","reducers/index.js","local-storage/localStorage.js","sound/success.mp3","sound/print.mp3","sound/bad.mp3","sound/type.mp3"],"names":["module","exports","dispatch","updateUser","user","type","updateToken","token","setDataAndInitGame","curGame","parsedFriends","parsedTweets","lastTweetFetched","lastTweetFetchDate","Date","now","AuthorBlank","useDrop","accept","hover","item","monitor","collect","isOver","canDrop","authorBeingDragged","getItem","drop","backgroundColor","color","width","blankName","blankHandle","author","name","handle","ref","className","style","TweetText","props","game","useSelector","state","textToRender","tweetToRender","classForTweetInfo","curTweet","quote","urlsToRender","quoteTweet","infoContent","header","console","error","text","urls","i","length","push","target","href","expanded_url","rel","key","display_url","tweetDate","date","toLocaleTimeString","toLocaleDateString","TweetMedia","undefined","curSlide","lightbox","slide","lbVisible","isVisible","useDispatch","tweetWithMedia","content","numMedia","mediaURLs","imgAr","hasMedia","mediaAr","media","log","url","src","alt","onClick","slideNum","height","controls","format","toggler","sources","QuoteTweet","printSound","Audio","printFile","TweetContent","soundState","ui","playSound","showOptions","pause","animateToggle","tweetIn","status","animation","animationDur","isQuote","CSSTransition","in","classNames","appear","timeout","onExited","onEntering","play","onEntered","TweetCard","gridOrder","gridSpan","verbs","posMap","JJ","JJR","JJS","NN","NNS","VB","VBD","VBG","VBN","VBP","VBZ","Blank","extractedWord","blankOrder","order","wordBeingDragged","blankFiller","value","wordInBlank","droppedWords","droppedWord","droppedIn","word","shredSound","shredFile","shredTweet","a","divToSnap","document","getElementsByClassName","pieces","html2canvas","then","canvas","pieceWidth","pieceHeight","piece","createElement","classList","add","getContext","drawImage","holder","appendChild","overflowY","display","store","getState","curTop","curWidth","opacity","animationInterval","setInterval","transform","Math","random","clearInterval","setTimeout","removeChild","currentTime","Promise","resolve","badSound","badFile","goodSound","goodFile","successSound","successFile","pos","require","tagger","Tagger","Sentencer","configure","actions","verb","floor","FillBlank","newTweet","foundWords","this","extractedWords","wordOptions","numBlanks","numDropped","lives","parent","GameController","extractWords","findAndExtractWords","newGame","correctDrop","newWordObj","correct","incorrectDrop","checkMovedWord","checkAlreadyDropped","dropID","checkDone","updateGame","fail","success","animateOut","done","getRandomWords","allWordReg","RegExp","wordAr","match","extractedWordArray","numCheckedWords","numChar","numWordsToExtract","usedIdx","randIdx","getRandomUniqueIndex","checkValidWord","wordLex","Lexer","lex","wordPos","tag","mappedPos","mappedPOS","findWordsInText","foundWordArray","searchExtractedWord","regSearchExtractedWord","startIdx","search","endIdx","start","end","sort","b","extractWordObjs","foundWord","searchFoundWord","foundWordRegex","replace","parts","split","jsxAr","curWordIdx","newGuessAuthor","randWord","make","normedWord","normalizeCap","shuffle","setWordOptions","setExtractedWords","serializedJson","newInstance","modelWord","normWord","character","allCaps","normedChars","charAt","isNaN","toUpperCase","toLowerCase","alert","join","array","temporaryValue","randomIndex","currentIndex","max","newIdx","includes","GuessAuthor","friendOptions","friendList","init","friends","fetchAllFriends","correctAuthor","randFriend","he","fetchNewTweets","tweets","tweetID","shouldReturn","allTweets","firstTweet","splice","pickRandomNumber","getRandomFriends","updateTweets","newTweets","Object","keys","toast","position","autoClose","closeButton","pauseOnHover","draggable","transition","Zoom","hideProgressBar","bodyClassName","tweet","updateParsedTweets","updateStore","userDetails","userToken","twitterProvider","userTokenSecret","tokenSecret","fetch","headers","res","json","response","errors","parseRawTweets","catch","allUserData","fetchFriends","next_cursor","users","cursor","next_cursor_str","parseRawFriends","err","rawFriends","pic","profile_image_url","screen_name","rawTweets","retweeted_status","in_reply_to_status_id","created_at","id_str","decode","full_text","entities","extended_entities","media_url_https","video_info","variants","content_type","is_quote_status","quoted_status","unshift","clickSound","clickFile","gameController","animateAndNext","TweetNav","message","DragWord","fibGame","strike","useDrag","dropResult","getDropResult","handleDrop","options","dropEffect","isDragging","drag","textDecoration","DragAuthor","authorGame","time","isOverTarget","dragCoords","getSourceClientOffset","DragOptions","map","Lives","anim","strikeBounce","strikes","numIcons","Toolbar","soundStateImage","soundImage","muteImage","infoImage","Info","customStyles","top","left","right","bottom","marginRight","Modal","setAppElement","onFailedAuth","onSuccessAuth","get","isAuthenticated","logout","localStorage","removeItem","shredAndSkip","App","infoState","showInfo","gameAdmin","animateOptions","optionsIn","gridStyle","img","isOpen","onRequestClose","contentLabel","overlayClassName","id","class","loginUrl","onFailure","onSuccess","requestTokenUrl","showIcon","intialUser","action","intialGame","lastFetched","intialLightbox","initialUI","combineReducers","persistedState","serializedState","parsedState","JSON","parse","gameFromJson","fromJSON","loadState","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","trace","subscribe","throttle","stringify","setItem","saveState","render","backend","HTML5Backend","getElementById"],"mappings":"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BAACiE,EAAA,EAAD,CACIC,GAAIP,EACJQ,WAAYL,EACZM,QAAQ,EACRC,QAASN,EACTO,SAAU,WA9EdpH,EJoDsB,CAC5BG,KAAM,mBI0BIkH,WAAY,YArEE,IAAfjB,GACCJ,EAAWsB,QAqEXC,UAAW,kBAAMhB,MAEjB,yBAAKpE,UAAU,8BACX,yBAAKA,UAAU,iBACV0C,MCzCN2C,G,OAtDG,WAEhB,IACI3C,EADAtC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKhC,WAGvCkH,EAAY,GACZC,EAAW,GAEF,OAATnF,EAIe,OAHFA,EAAKM,WAKA,cAAdN,EAAKpC,KACP0E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAKiB,gBAAdtC,EAAKpC,KACZ0E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAIiB,aAAdtC,EAAKpC,MAAqC,aAAdoC,EAAKpC,MACxC0E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAIJ4C,EAAY,SACZC,EAAW,aAGXvE,QAAQC,MAAM,sCAQlByB,EAAU,KAGZ,OAAQ,yBAAK1C,UAAW,SAAWsF,EAAY,IAAMC,GAAW7C,K,gBC6cnD8C,EAxgBH,CACV,aACA,cACA,aACA,aACA,UACA,UACA,MACA,WACA,QACA,MACA,UACA,SACA,aACA,YACA,SACA,WACA,MACA,OACA,QACA,WACA,QACA,UACA,SACA,aACA,QACA,UACA,WACA,UACA,YACA,UACA,aACA,YACA,WACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,QACA,UACA,SACA,YACA,WACA,QACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,YACA,YACA,UACA,UACA,OACA,UACA,YACA,aACA,QACA,QACA,aACA,QACA,SACA,QACA,QACA,WACA,YACA,UACA,WACA,aACA,QACA,OACA,cACA,UACA,UACA,UACA,UACA,WACA,cACA,UACA,UACA,WACA,UACA,UACA,WACA,gBACA,aACA,WACA,WACA,UACA,SACA,UACA,UACA,WACA,WACA,cACA,YACA,UACA,UACA,WACA,aACA,UACA,UACA,SACA,WACA,YACA,aACA,OACA,UACA,YACA,aACA,UACA,SACA,WACA,YACA,YACA,SACA,QACA,SACA,WACA,WACA,SACA,SACA,QACA,SACA,WACA,UACA,cACA,SACA,cACA,SACA,WACA,SACA,SACA,SACA,YACA,UACA,SACA,SACA,WACA,UACA,gBACA,SACA,YACA,WACA,WACA,eACA,UACA,WACA,UACA,UACA,cACA,cACA,aACA,YACA,WACA,QACA,OACA,OACA,OACA,OACA,UACA,SACA,QACA,SACA,YACA,YACA,SACA,SACA,YACA,UACA,WACA,UACA,UACA,YACA,SACA,SACA,SACA,QACA,YACA,YACA,QACA,YACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,SACA,WACA,aACA,UACA,UACA,UACA,SACA,UACA,cACA,YACA,aACA,cACA,UACA,OACA,SACA,WACA,YACA,MACA,QACA,WACA,YACA,UACA,UACA,SACA,QACA,QACA,OACA,UACA,UACA,SACA,QACA,WACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,OACA,YACA,OACA,OACA,WACA,aACA,SACA,YACA,SACA,UACA,YACA,cACA,WACA,QACA,gBACA,YACA,SACA,WACA,WACA,UACA,UACA,UACA,YACA,WACA,SACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,SACA,YACA,cACA,UACA,OACA,QACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,UACA,YACA,OACA,SACA,WACA,QACA,WACA,SACA,MACA,WACA,SACA,cACA,MACA,SACA,SACA,WACA,UACA,YACA,UACA,SACA,QACA,YACA,WACA,WACA,QACA,WACA,YACA,SACA,UACA,WACA,UACA,WACA,YACA,SACA,QACA,UACA,UACA,SACA,YACA,SACA,UACA,cACA,QACA,WACA,SACA,YACA,YACA,UACA,WACA,UACA,UACA,UACA,cACA,WACA,UACA,UACA,WACA,aACA,QACA,UACA,OACA,WACA,UACA,UACA,UACA,WACA,UACA,UACA,QACA,aACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YACA,UACA,WACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,OACA,SACA,SACA,YACA,YACA,YACA,SACA,WACA,UACA,UACA,SACA,QACA,SACA,WACA,WACA,eACA,YACA,SACA,UACA,UACA,UACA,SACA,QACA,aACA,SACA,UACA,SACA,YACA,WACA,UACA,UACA,UACA,UACA,WACA,SACA,WACA,SACA,SACA,SACA,SACA,aACA,QACA,SACA,OACA,OACA,WACA,SACA,SACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,OACA,WACA,WACA,SACA,OACA,UACA,QACA,OACA,QACA,YACA,aACA,UACA,QACA,QACA,cACA,QACA,YACA,aACA,aACA,aACA,aACA,YACA,QACA,SACA,eACA,aACA,UACA,YACA,YACA,SACA,UACA,UACA,SACA,UACA,YACA,aACA,cACA,WACA,OACA,SACA,SACA,QACA,OACA,YACA,OACA,WACA,OACA,OACA,QACA,QACA,QACA,QACA,aACA,WACA,YACA,YACA,WACA,YACA,YACA,SACA,QACA,SACA,cACA,QACA,UACA,YACA,QACA,SACA,SACA,UACA,SACA,MACA,UACA,WACA,QACA,SACA,OACA,QACA,YACA,WACA,YACA,QACA,QACA,MACA,WACA,UACA,QACA,QACA,MACA,OCvfaC,EAdF,CACTC,GAAI,YACJC,IAAK,YACLC,IAAK,YACLC,GAAI,OACJC,IAAK,QACLC,GAAI,OACJC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,QCqEMC,EA5ED,SAAAlG,GAIZ,IAAImG,EAAgBnG,EAAMmG,cACtBC,EAAapG,EAAMoG,WACnBnG,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKhC,WANtB,EAQiCQ,YAAQ,CAC5DC,OAAQ,OACR2H,MAAOD,EACPjH,KAAM,iBAAO,CAAEO,KAAMyG,EAAeE,MAAOD,IAC3CtH,QAAS,SAAAD,G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","file":"static/js/main.ff93442f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shred.0e2f27b8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound.de43e1cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/no_sound.f8f4853e.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.fa49b61e.svg\";","module.exports = __webpack_public_path__ + \"static/media/click.ecde8151.mp3\";","import React, { Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FsLightbox from 'fslightbox-react';\n\nimport { setLBSlide, toggleLBVisible } from \"./../../../actions\";\n\nlet dispatch;\n\nvar showSlide = slide => {\n  dispatch(toggleLBVisible());\n  dispatch(setLBSlide(slide));\n};\n\nconst TweetMedia = props => {\n  let quote = props.quote;\n\n  let curGame = useSelector(state => state.game.curGame);\n  let curTweet = null;\n  if (curGame !== undefined) {\n    curTweet = curGame.curTweet;\n  }\n\n  let curSlide = useSelector(state => state.lightbox.slide);\n  let lbVisible = useSelector(state => state.lightbox.isVisible);\n\n  dispatch = useDispatch();\n  let tweetWithMedia = null;\n\n  //check if tweet with media we are rendering is quote or orginial\n\n  if (quote === true) {\n    tweetWithMedia = curTweet.quoteTweet;\n  } else {\n    tweetWithMedia = curTweet;\n  }\n  let content = null;\n\n  let numMedia = 0;\n\n  let mediaURLs = [];\n  let imgAr = [];\n  if (tweetWithMedia !== null) {\n    if (tweetWithMedia.hasMedia) {\n      const mediaAr = tweetWithMedia.media;\n      console.log(mediaAr);\n      numMedia = mediaAr.length;\n      //we have some media to render!\n      for (let i = 0; i < mediaAr.length; i++) {\n        let media = mediaAr[i];\n        console.log(media);\n        mediaURLs.push(media.url);\n        if (media.type === \"photo\" || media.type === \"animated_gif\") {\n          imgAr.push(\n            <img key={i} src={media.url} alt=\"\" className={\"tweet-media-item tweet-media-item-\" + i} onClick={() => showSlide(i)}></img>\n          );\n        } else if (media.type === \"video\") {\n          imgAr.push(\n            <video\n              width=\"426\"\n              height=\"240\"\n              controls\n              className=\"tweet-media-item fit\"\n              key={i}\n            >\n              <source src={media.url} type={media.format}></source>\n              Your browser does not support inline video viewing.\n            <a href={media.url}>Click here to view.</a>\n            </video>\n          );\n        } else {\n          console.error(\n            \"Media Type not caught in switch statement: \" + media.type\n          );\n        }\n      }\n\n      console.log(imgAr);\n      content = (\n        <div className={\"tweet-media-grid-\" + numMedia}>\n          {imgAr}\n\n          <FsLightbox toggler={lbVisible} slide={curSlide} sources={mediaURLs} />\n        </div>\n      );\n      //console.log(content);\n    } else {\n      content = null;\n    }\n  }\n  else {\n    content = null;\n  }\n  \n  console.log(content);\n\n  //return <div className={`tweet-media-${numMedia}`}>{content}</div>;\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default TweetMedia;\n","//called upon logout\nexport const logoutAndReset = () => ({\n  type: 'RESET'\n})\n\n//action creator for updating the value of store.user.isAuthenticated\n//expects isAuthenticated to be boolean\nexport const updateAuthentication = isAuthenticated => ({\n  type: 'SET_AUTHENTICATION',\n  isAuthenticated\n})\n\n//action creator for updating the user object in store.user.userDetails\n//user expected to be object\nexport const updateUser = user => ({\n  type: 'SET_USER',\n  user\n})\n\n//action creator for updating the token string in store.user.userToken\n//expects token to be a string\nexport const updateToken = token => ({\n  type: 'SET_TOKEN',\n  token\n})\n\nexport const setDataAndInitGame = (curGame, parsedFriends, parsedTweets, lastTweetFetched) => ({\n  type: 'INIT_GAME',\n  curGame,\n  parsedFriends,\n  parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\n//action creator for setting the value of store.tweets.lastTweetFetched for timeline fetching management\n//expects lastFetched to be a string (id of tweet)\nexport const updateLastTweetFetched = lastFetched => ({\n  type: 'SET_LAST_TWEET_FETCHED',\n  lastFetched\n})\n\n//updates array of objects for store.tweets.parsedTweets\n//expects array of objects\nexport const updateParsedTweets = (parsedTweets, lastTweetFetched) => (\n  {\n  type: 'SET_PARSED_TWEETS',\n  parsedTweets: parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\nexport const updateCurGame = curGame => ({\n  type: 'SET_CURRENT_GAME',\n  curGame\n})\n\nexport const updateParsedFriends = parsedFriends => ({\n  type: 'SET_PARSED_FRIENDS',\n  parsedFriends\n})\n\nexport const toggleLBVisible = () => ({\n  type: 'TOGGLE_LB_VISIBLE',\n})\n\nexport const setLBSlide = (slideNum) => ({\n  type: 'SET_LB_SLIDE',\n  slideNum\n})\n\nexport const tweetIn = () => ({\n  type: 'TWEET_IN_TRUE'\n})\n\nexport const tweetOut = () => ({\n  type: 'TWEET_IN_FALSE'\n})\n\nexport const optionsIn = () => ({\n  type: 'OPTIONS_IN_TRUE'\n})\n\nexport const optionsOut = () => ({\n  type: 'OPTIONS_IN_FALSE'\n})\n\nexport const playSound = () => ({\n  type: 'PLAY_SOUND'\n})\n\nexport const muteSound = () => ({\n  type: 'MUTE_SOUND'\n})\n\nexport const showInfo = () => ({\n  type: 'SHOW_INFO'\n})\n\nexport const hideInfo = () => ({\n  type: 'HIDE_INFO'\n})\n\nexport const strikeIn = () => ({\n  type: 'STRIKE_START'\n})\n\nexport const strikeOut = () => ({\n  type: 'STRIKE_STOP'\n})","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nconst AuthorBlank = () => {\n    //console.log('rendering blank');\n    const [{ canDrop, isOver, authorBeingDragged }, drop] = useDrop({\n        accept: \"author\",\n        hover: (item, monitor) => {\n            //console.log(monitor);\n        },\n        collect: monitor => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n            authorBeingDragged: monitor.getItem()\n        })\n    });\n\n    const isActive = canDrop && isOver;\n    let backgroundColor = \"transparent\";\n    let color = 'black';\n    let width = '150px';\n\n    let blankName = null;\n    let blankHandle = null;\n\n    if (isActive) {\n      backgroundColor = \"transparent\";\n      color = 'black';\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    } else if (canDrop) {\n      backgroundColor = \"#BF0404\";\n      color = backgroundColor;\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    }\n\n    return  (\n        <div ref={drop} className=\"author-blank\" >\n            <h3>&#8213;</h3><h3 className={\"author-blank-empty\"} style={{backgroundColor, color, width}}> {blankName} <span className={\"tweet-info-details\"}> {blankHandle}</span></h3>\n        </div>\n    )\n}\n\nexport default AuthorBlank;","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AuthorBlank from \"./AuthorBlank\";\n\n\nconst TweetText = props => {\n\tconst game = useSelector(state => state.game.curGame);\n\tif (game !== null) {\n\t\tlet curTweet = game.curTweet;\n\n\t\t//reset used indexes for every new tweet\n\t\t//usedIdx = [];\n\n\t\tlet quote = props.quote;\n\t\tlet textToRender;\n\t\tlet urlsToRender = [];\n\t\tlet tweetToRender;\n\t\tlet classForTweetInfo;\n\t\t//check if we need to render quote tweet info or no\n\t\tif (quote === true) {\n\t\t\ttweetToRender = curTweet.quoteTweet;\n\t\t\tclassForTweetInfo = \"quote-tweet-info\";\n\t\t}\n\t\telse {\n\t\t\ttweetToRender = curTweet;\n\t\t\tclassForTweetInfo = \"tweet-info\"\n\t\t}\n\t\tlet infoContent = null;\n\t\tlet header = null;\n\t\tif (tweetToRender !== null) {\n\t\t\tinfoContent = (\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<h3 className={classForTweetInfo + \"-name\"}>&#8213; {tweetToRender.user.name} <span className={classForTweetInfo + \"-details\"}> @{tweetToRender.user.handle}</span></h3>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\tconsole.error('no tweetToRender in TweetText')\n\t\t}\n\n\t\t//no need to extract words if it's a quote tweet\n\t\tif (quote === true) {\n\t\t\ttextToRender = curTweet.quoteTweet.text;\n\t\t\tif (curTweet.quoteTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.quoteTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.quoteTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.quoteTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//extract words and such if its a fillblank game\n\t\telse if (game.type === 'FillBlank') {\n\t\t\theader = <h2 className=\"section-title\">Complete the Tweet:</h2>\n\t\t\ttextToRender = game.textToRender;\n\t\t\t//console.log(textToRender);\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//no need to extract words if game is guess author\n\t\telse if (game.type === 'GuessAuthor') {\n\t\t\tinfoContent = <AuthorBlank />;\n\t\t\theader = <h2 className=\"section-title\">Guess the Author:</h2>\n\t\t\ttextToRender = curTweet.text;\n\t\t\turlsToRender = null;\n\t\t}\n\t\telse if (game.type === \"Complete\" || game.type === 'NoTweets') {\n\t\t\ttextToRender = curTweet.text;\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.error('Game type not recognized in TweetText');\n\t\t}\n\n\t\tlet tweetDate = new Date(tweetToRender.date)\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t{(game.type === 'FillBlank' || game.type === 'GuessAuthor') && quote !== true ?\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t{header}\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\n\t\t\t\t\t:\n\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t}\n\t\t\t</Fragment>\n\t\t);\n\t}\n\telse return null;\n};\n\nexport default TweetText;\n","import React from 'react'\nimport TweetText from './../TweetText';\nimport TweetMedia from '../TweetMedia';\n\nconst QuoteTweet = () => {\n\n    return(\n        <div className=\"quote-tweet-grid\">\n            <div className=\"quote-tweet-content\">\n                <TweetText quote={true} />\n                <TweetMedia quote={true} />\n            </div>\n        </div>\n    )\n}\n\nexport default QuoteTweet","import React, { Fragment } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TweetText from \"./TweetText\";\nimport TweetMedia from \"./TweetMedia\";\nimport QuoteTweet from \"./QuoteTweet/QuoteTweet\";\n\nimport { CSSTransition } from 'react-transition-group';\nimport { tweetIn, optionsIn } from '../../../actions';\n\nimport printFile from './../../../sound/print.mp3';\n\n\nlet printSound = new Audio(printFile);\n\nconst TweetContent = () => {\n\n    let soundState = useSelector(state => state.ui.playSound);\n\n    const enterTransition = () => {\n        dispatch(tweetIn());\n    }\n\n    const showOptions = () => {\n        dispatch(optionsIn());\n        printSound.pause();\n    }\n\n    \n    const playSound = () => {\n        if(soundState === true) {\n            printSound.play();\n        }\n    }\n\n    let curGame = useSelector(state => state.game.curGame);\n\n    let animateToggle = useSelector(state => state.ui.tweetIn);\n\n    let dispatch = useDispatch();\n\n    let curTweet = null;\n    if (curGame !== null) {\n        curTweet = curGame.curTweet;\n        if(curGame.type === 'Complete') {\n            if(curGame.status === 'Fail') {\n                showOptions();\n                return null;\n            }\n        }\n    }\n\n    let content = null;\n\n    let animation = 'slide-up';\n    let animationDur = 1000;\n\n    if (animateToggle === false) {\n        animationDur = 200;\n    }\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n        if(curGame.type === 'Complete') {\n            animation = 'fade';\n        }\n        else if(curGame.type === 'NoTweets') {\n            return null;\n        }\n\n        //check if we need to render a quote tweet\n        if (curTweet.isQuote === true) {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                    <QuoteTweet />\n                </Fragment>\n            )\n        }\n        else {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                </Fragment>\n            )\n        }\n    }\n\n   \n\n    return (\n        <CSSTransition\n            in={animateToggle}\n            classNames={animation}\n            appear={true}\n            timeout={animationDur}\n            onExited={()=> enterTransition()}\n            onEntering={() => playSound()}\n            onEntered={() => showOptions()}\n        >\n            <div className=\"tweet-content-wrapper torn\">\n                <div className=\"tweet-content\">\n                    {content}\n                </div>\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default TweetContent","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TweetContent from \"./TweetContent/TweetContent\";\nimport \"./TweetCard.css\";\n\n\n\n\nconst TweetCard = () => {\n  //hook into state to get the current tweet to display\n  let game = useSelector(state => state.game.curGame);\n  let content;\n\n  let gridOrder = '';\n  let gridSpan = '';\n\n  if (game !== null) {\n    let curTweet = game.curTweet;\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n      //render the info and everything if its FillBlank\n      if (game.type === 'FillBlank') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n      }\n      //put in blank instead of info\n      else if (game.type === 'GuessAuthor') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        )\n      }\n      else if (game.type === 'Complete' || game.type === 'NoTweets') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n\n        gridOrder = 'second'\n        gridSpan = 'span-cols'\n      }\n      else {\n        console.error('Game type not caught in TweetCard');\n      }\n    }\n\n  }\n\n  //no tweets view\n  else {\n    content = null;\n  }\n\n  return (<div className={'tweet ' + gridOrder + \" \" + gridSpan}>{content}</div>);\n};\n\nexport default TweetCard;\n","let verbs = [\n  \"Accelerate\",\n  \"Accommodate\",\n  \"Accomplish\",\n  \"Accumulate\",\n  \"Achieve\",\n  \"Acquire\",\n  \"Act\",\n  \"Activate\",\n  \"Adapt\",\n  \"Add\",\n  \"Address\",\n  \"Adjust\",\n  \"Administer\",\n  \"Advertise\",\n  \"Advise\",\n  \"Advocate\",\n  \"Aid\",\n  \"Aide\",\n  \"Align\",\n  \"Allocate\",\n  \"Amend\",\n  \"Analyze\",\n  \"Answer\",\n  \"Anticipate\",\n  \"Apply\",\n  \"Appoint\",\n  \"Appraise\",\n  \"Approve\",\n  \"Arbitrate\",\n  \"Arrange\",\n  \"Articulate\",\n  \"Ascertain\",\n  \"Assemble\",\n  \"Assess\",\n  \"Assign\",\n  \"Assist\",\n  \"Assume\",\n  \"Attain\",\n  \"Attend\",\n  \"Attract\",\n  \"Audit\",\n  \"Augment\",\n  \"Author\",\n  \"Authorize\",\n  \"Automate\",\n  \"Avert\",\n  \"Award\",\n  \"Bargain\",\n  \"Begin\",\n  \"Bolster\",\n  \"Boost\",\n  \"Bought\",\n  \"Brief\",\n  \"Broaden\",\n  \"Budget\",\n  \"Build\",\n  \"Built\",\n  \"Calculate\",\n  \"Calibrate\",\n  \"Canvass\",\n  \"Capture\",\n  \"Care\",\n  \"Catalog\",\n  \"Catalogue\",\n  \"Categorize\",\n  \"Cater\",\n  \"Cause\",\n  \"Centralize\",\n  \"Chair\",\n  \"Charge\",\n  \"Chart\",\n  \"Check\",\n  \"Check in\",\n  \"Check out\",\n  \"Clarify\",\n  \"Classify\",\n  \"Co-operate\",\n  \"Coach\",\n  \"Code\",\n  \"Collaborate\",\n  \"Collate\",\n  \"Collect\",\n  \"Combine\",\n  \"Comfort\",\n  \"Commence\",\n  \"Communicate\",\n  \"Compare\",\n  \"Compile\",\n  \"Complete\",\n  \"Compose\",\n  \"Compute\",\n  \"Conceive\",\n  \"Conceptualize\",\n  \"Conciliate\",\n  \"Conclude\",\n  \"Condense\",\n  \"Conduct\",\n  \"Confer\",\n  \"Confirm\",\n  \"Connect\",\n  \"Conserve\",\n  \"Consider\",\n  \"Consolidate\",\n  \"Construct\",\n  \"Consult\",\n  \"Contact\",\n  \"Contract\",\n  \"Contribute\",\n  \"Control\",\n  \"Convert\",\n  \"Convey\",\n  \"Convince\",\n  \"Cooperate\",\n  \"Coordinate\",\n  \"Copy\",\n  \"Correct\",\n  \"Correlate\",\n  \"Correspond\",\n  \"Counsel\",\n  \"Create\",\n  \"Critique\",\n  \"Cultivate\",\n  \"Customize\",\n  \"Debate\",\n  \"Debug\",\n  \"Decide\",\n  \"Decrease\",\n  \"Dedicate\",\n  \"Deduce\",\n  \"Defend\",\n  \"Defer\",\n  \"Define\",\n  \"Delegate\",\n  \"Deliver\",\n  \"Demonstrate\",\n  \"Depict\",\n  \"Depreciated\",\n  \"Derive\",\n  \"Describe\",\n  \"Design\",\n  \"Detail\",\n  \"Detect\",\n  \"Determine\",\n  \"Develop\",\n  \"Devise\",\n  \"Devote\",\n  \"Diagnose\",\n  \"Diagram\",\n  \"Differentiate\",\n  \"Direct\",\n  \"Discharge\",\n  \"Disclose\",\n  \"Discover\",\n  \"Discriminate\",\n  \"Discuss\",\n  \"Dispatch\",\n  \"Display\",\n  \"Dissect\",\n  \"Disseminate\",\n  \"Distinguish\",\n  \"Distribute\",\n  \"Diversify\",\n  \"Document\",\n  \"Draft\",\n  \"Draw\",\n  \"Drew\",\n  \"Earn\",\n  \"Edit\",\n  \"Educate\",\n  \"Effect\",\n  \"Elect\",\n  \"Elicit\",\n  \"Eliminate\",\n  \"Emphasize\",\n  \"Employ\",\n  \"Enable\",\n  \"Encourage\",\n  \"Enforce\",\n  \"Engineer\",\n  \"Enhance\",\n  \"Enlarge\",\n  \"Enlighten\",\n  \"Enlist\",\n  \"Enrich\",\n  \"Ensure\",\n  \"Enter\",\n  \"Entertain\",\n  \"Enumerate\",\n  \"Equip\",\n  \"Establish\",\n  \"Estimate\",\n  \"Evaluate\",\n  \"Examine\",\n  \"Exchange\",\n  \"Execute\",\n  \"Exercise\",\n  \"Exhibit\",\n  \"Expand\",\n  \"Expedite\",\n  \"Experiment\",\n  \"Explain\",\n  \"Explore\",\n  \"Express\",\n  \"Extend\",\n  \"Extract\",\n  \"Extrapolate\",\n  \"Fabricate\",\n  \"Facilitate\",\n  \"Familiarize\",\n  \"Fashion\",\n  \"File\",\n  \"Filter\",\n  \"Finalize\",\n  \"Fine-tune\",\n  \"Fix\",\n  \"Focus\",\n  \"Forecast\",\n  \"Formulate\",\n  \"Fortify\",\n  \"Forward\",\n  \"Foster\",\n  \"Found\",\n  \"Frame\",\n  \"Fund\",\n  \"Furnish\",\n  \"Further\",\n  \"Gather\",\n  \"Gauge\",\n  \"Generate\",\n  \"Govern\",\n  \"Grade\",\n  \"Grant\",\n  \"Greet\",\n  \"Guide\",\n  \"Handle\",\n  \"Head\",\n  \"Help\",\n  \"Highlight\",\n  \"Hire\",\n  \"Host\",\n  \"Identify\",\n  \"Illustrate\",\n  \"Impart\",\n  \"Implement\",\n  \"Import\",\n  \"Improve\",\n  \"Improvise\",\n  \"Incorporate\",\n  \"Increase\",\n  \"Index\",\n  \"Individualize\",\n  \"Influence\",\n  \"Inform\",\n  \"Initiate\",\n  \"Innovate\",\n  \"Inspect\",\n  \"Inspire\",\n  \"Install\",\n  \"Institute\",\n  \"Instruct\",\n  \"Insure\",\n  \"Integrate\",\n  \"Interact\",\n  \"Interface\",\n  \"Interpret\",\n  \"Intervene\",\n  \"Interview\",\n  \"Introduce\",\n  \"Invent\",\n  \"Inventory\",\n  \"Investigate\",\n  \"Involve\",\n  \"Join\",\n  \"Judge\",\n  \"Justify\",\n  \"Label\",\n  \"Launch\",\n  \"Lead\",\n  \"Learn\",\n  \"Lecture\",\n  \"License\",\n  \"Lighten\",\n  \"Liquidate\",\n  \"List\",\n  \"Listen\",\n  \"Litigate\",\n  \"Lobby\",\n  \"Localize\",\n  \"Locate\",\n  \"Log\",\n  \"Maintain\",\n  \"Manage\",\n  \"Manufacture\",\n  \"Map\",\n  \"Market\",\n  \"Master\",\n  \"Maximize\",\n  \"Measure\",\n  \"Mechanize\",\n  \"Mediate\",\n  \"Mentor\",\n  \"Merge\",\n  \"Methodize\",\n  \"Minimize\",\n  \"Mobilize\",\n  \"Model\",\n  \"Moderate\",\n  \"Modernize\",\n  \"Modify\",\n  \"Monitor\",\n  \"Motivate\",\n  \"Narrate\",\n  \"Navigate\",\n  \"Negotiate\",\n  \"Notify\",\n  \"Nurse\",\n  \"Nurture\",\n  \"Observe\",\n  \"Obtain\",\n  \"Officiate\",\n  \"Offset\",\n  \"Operate\",\n  \"Orchestrate\",\n  \"Order\",\n  \"Organize\",\n  \"Orient\",\n  \"Orientate\",\n  \"Originate\",\n  \"Outline\",\n  \"Overhaul\",\n  \"Oversaw\",\n  \"Oversee\",\n  \"Package\",\n  \"Participate\",\n  \"Perceive\",\n  \"Perfect\",\n  \"Perform\",\n  \"Persuade\",\n  \"Photograph\",\n  \"Pilot\",\n  \"Pioneer\",\n  \"Plan\",\n  \"Practice\",\n  \"Predict\",\n  \"Prepare\",\n  \"Present\",\n  \"Preserve\",\n  \"Preside\",\n  \"Prevent\",\n  \"Print\",\n  \"Prioritize\",\n  \"Probe\",\n  \"Process\",\n  \"Produce\",\n  \"Program\",\n  \"Project\",\n  \"Promote\",\n  \"Propose\",\n  \"Provide\",\n  \"Publicize\",\n  \"Publish\",\n  \"Purchase\",\n  \"Qualify\",\n  \"Quantify\",\n  \"Quote\",\n  \"Raise\",\n  \"Ran\",\n  \"Rank\",\n  \"Rate\",\n  \"Read\",\n  \"Reason\",\n  \"Recall\",\n  \"Recognize\",\n  \"Recommend\",\n  \"Reconcile\",\n  \"Record\",\n  \"Recreate\",\n  \"Recruit\",\n  \"Rectify\",\n  \"Reduce\",\n  \"Refer\",\n  \"Refine\",\n  \"Register\",\n  \"Regulate\",\n  \"Rehabilitate\",\n  \"Reinforce\",\n  \"Relate\",\n  \"Related\",\n  \"Release\",\n  \"Remodel\",\n  \"Render\",\n  \"Renew\",\n  \"Reorganize\",\n  \"Repair\",\n  \"Replace\",\n  \"Report\",\n  \"Represent\",\n  \"Research\",\n  \"Reserve\",\n  \"Resolve\",\n  \"Respond\",\n  \"Restore\",\n  \"Restrict\",\n  \"Retain\",\n  \"Retrieve\",\n  \"Revamp\",\n  \"Reveal\",\n  \"Review\",\n  \"Revise\",\n  \"Revitalize\",\n  \"Route\",\n  \"Sample\",\n  \"Save\",\n  \"Scan\",\n  \"Schedule\",\n  \"Screen\",\n  \"Script\",\n  \"Scrutinize\",\n  \"Search\",\n  \"Secure\",\n  \"Segment\",\n  \"Select\",\n  \"Serve\",\n  \"Service\",\n  \"Settle\",\n  \"Shape\",\n  \"Share\",\n  \"Show\",\n  \"Simplify\",\n  \"Simulate\",\n  \"Sketch\",\n  \"Sold\",\n  \"Solicit\",\n  \"Solve\",\n  \"Sort\",\n  \"Speak\",\n  \"Spearhead\",\n  \"Specialize\",\n  \"Specify\",\n  \"Spoke\",\n  \"Stage\",\n  \"Standardize\",\n  \"Start\",\n  \"Stimulate\",\n  \"Straighten\",\n  \"Strategize\",\n  \"Streamline\",\n  \"Strengthen\",\n  \"Structure\",\n  \"Study\",\n  \"Submit\",\n  \"Substantiate\",\n  \"Substitute\",\n  \"Suggest\",\n  \"Summarize\",\n  \"Supervise\",\n  \"Supply\",\n  \"Support\",\n  \"Surpass\",\n  \"Survey\",\n  \"Sustain\",\n  \"Symbolize\",\n  \"Synthesize\",\n  \"Systematize\",\n  \"Tabulate\",\n  \"Tail\",\n  \"Target\",\n  \"Taught\",\n  \"Teach\",\n  \"Tend\",\n  \"Terminate\",\n  \"Test\",\n  \"Theorize\",\n  \"Time\",\n  \"Tour\",\n  \"Trace\",\n  \"Track\",\n  \"Trade\",\n  \"Train\",\n  \"Transcribe\",\n  \"Transfer\",\n  \"Transform\",\n  \"Translate\",\n  \"Transmit\",\n  \"Transport\",\n  \"Transpose\",\n  \"Travel\",\n  \"Treat\",\n  \"Triple\",\n  \"Troubleshot\",\n  \"Tutor\",\n  \"Uncover\",\n  \"Undertook\",\n  \"Unify\",\n  \"Unveil\",\n  \"Update\",\n  \"Upgrade\",\n  \"Upheld\",\n  \"Use\",\n  \"Utilize\",\n  \"Validate\",\n  \"Value\",\n  \"Verify\",\n  \"View\",\n  \"Visit\",\n  \"Visualize\",\n  \"Vitalize\",\n  \"Volunteer\",\n  \"Weigh\",\n  \"Widen\",\n  \"Win\",\n  \"Withdraw\",\n  \"Witness\",\n  \"Write\",\n  \"Xerox\",\n  \"Zap\",\n  \"Zip\"\n];\n\nexport default verbs;\n","var posMap = {\n    JJ: 'adjective',\n    JJR: 'adjective',\n    JJS: 'adjective',\n    NN: 'noun',\n    NNS: 'nouns',\n    VB: 'verb',\n    VBD: 'verb',\n    VBG: 'verb',\n    VBN: 'verb',\n    VBP: 'verb',\n    VBZ: 'verb'\n}\n\nexport default posMap;","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { useSelector } from \"react-redux\";\n\nconst Blank = props => {\n\n  //console.log('rendering blank');\n\n  let extractedWord = props.extractedWord;\n  let blankOrder = props.blankOrder;\n  let game = useSelector(state => state.game.curGame);\n\n  const [{ canDrop, isOver, wordBeingDragged }, drop] = useDrop({\n    accept: \"word\",\n    order: blankOrder,\n    drop: () => ({ name: extractedWord, order: blankOrder }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      wordBeingDragged: monitor.getItem()\n    })\n  });\n\n  let content = null;\n  let blankFiller = null;\n  let width = \"40px\";\n\n  const isActive = canDrop && isOver;\n  let backgroundColor = 'transparent';\n  let color = backgroundColor;\n  if (isActive) {\n    backgroundColor = \"transparent\";\n    color = \"black\";\n    //size all the blanks according to the word being dragged\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  } else if (canDrop) {\n    backgroundColor = \"#BF0404\";\n    color = backgroundColor;\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  }\n\n  let wordInBlank = null;\n\n  if (game !== null) {\n    let droppedWords = game.droppedWords;\n    for (let droppedWord of droppedWords) {\n      if (droppedWord.droppedIn === blankOrder) {\n        wordInBlank = droppedWord;\n      }\n    }\n  }\n\n  //render blank or filled in blank\n  if (wordInBlank !== null) {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank-filled\"\n        style={{ backgroundColor: \"transparent\", color: \"black\" }}\n      >\n        {wordInBlank.word}\n      </span>\n    );\n  } else {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank\"\n        style={{ backgroundColor, color, width }}\n      >\n        {blankFiller}\n      </span>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default Blank;\n","import html2canvas from 'html2canvas';\nimport shredFile from './../sound/shred.mp3';\nimport store from './../index';\n\nlet shredSound = new Audio(shredFile);\n\nconst shredTweet = async () => {\n\n    var divToSnap = document.getElementsByClassName('tweet')[0];\n    var pieces = [];\n    var holder;\n    html2canvas(divToSnap, {\n        backgroundColor: null\n    }).then(function async (canvas) {\n\n        let pieceWidth = canvas.width / 10;\n        var pieceHeight = canvas.height;\n\n        \n        for (let i = 0; i < 10; i++) {\n            let piece = document.createElement(\"canvas\");\n            piece.classList.add('shred-piece');\n            piece.width = pieceWidth;\n            piece.height = pieceHeight;\n\n            let pieceCtx = piece.getContext('2d');\n\n            pieceCtx.drawImage(canvas, pieceWidth * (i), 0, pieceWidth, pieceHeight, 0, 0, pieceWidth, pieceHeight);\n\n            pieces.push(piece);\n        }\n\n        holder = document.createElement(\"div\");\n        holder.classList.add('holder');\n        holder.appendChild(canvas);\n\n        canvas.classList.add('full');\n\n        document.getElementsByClassName('main-flex')[0].style.overflowY = 'visible';\n\n        document.getElementsByClassName('tweet-content-wrapper')[0].style.display = \"none\";\n        divToSnap.appendChild(holder);\n\n        for (let piece of pieces) {\n            divToSnap.appendChild(piece);\n        }\n\n        //play shred sound\n        if (store.getState().ui.playSound === true) {\n\t\t\tshredSound.play();\n\t\t}\n\n        var curTop = 0;\n        var curWidth = 10;\n        var opacity = 1;\n\n        var animationInterval = setInterval(async () => {\n            curTop = curTop + 10;\n            curWidth = curWidth - 0.05;\n            opacity = opacity - .03;\n            \n            for (let piece of pieces) {\n                piece.style.transform = \"translate(\" + (Math.random() * (4) - 2) + \"px,\" + curTop + \"%)\";\n                piece.style.width = curWidth + \"%\";\n                piece.style.opacity = opacity;\n            }\n            canvas.style.transform = \"translateY(\" + curTop + \"%)\";\n\n            if (curTop >= 110) {\n                clearInterval(animationInterval);\n                \n                for (let piece of pieces) {\n                    piece.style.opacity = 0;\n                }\n\n            }\n        }, 200);\n    });\n\n    //cleanup after animation\n    setTimeout(() => {\n        //remove the piece canvasses\n        for(let piece of pieces) {\n            divToSnap.removeChild(piece)\n        }\n\n        //stop and reset the sound\n        shredSound.pause();\n        shredSound.currentTime = 0;\n\n        //reset overflowY for main flex\n        document.getElementsByClassName('main-flex')[0].style.overflowY = 'hidden';\n        document.getElementsByClassName('tweet-content-wrapper')[0].style.display = \"block\";\n        //remove the \"full\" image canvas\n        divToSnap.removeChild(holder)\n    }, 2700)\n\n    return new Promise(resolve => setTimeout(resolve, 2700));\n\n}\n\n\nexport default shredTweet;","import React from \"react\";\nimport verbs from \"./../custom-dict/verbs\";\nimport posMap from \"./../config/pos\";\nimport Blank from \"../components/TweetCard/TweetContent/WordBlank\";\nimport GameController from \"./GameController\";\nimport store from '../index';\nimport shredTweet from './../utilities/ShredTweet';\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport { strikeIn } from \"../actions\";\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\n\nvar pos = require(\"pos\");\nvar tagger = new pos.Tagger();\n\n//get sentencer reference for generating random words basd on pos\nvar Sentencer = require(\"sentencer\");\nSentencer.configure({\n\tactions: {\n\t\tverb: function () {\n\t\t\treturn verbs[Math.floor(Math.random() * (verbs.length - 1))];\n\t\t}\n\t}\n});\n\nexport default class FillBlank {\n\tconstructor(newTweet, foundWords) {\n\t\t//call constructor from super class Game\n\t\tthis.curTweet = newTweet;\n\t\tthis.type = 'FillBlank'\n\n\t\t//FillBlank specific properties\n\t\tthis.extractedWords = []; //array of extracted word objects\n\t\tthis.wordOptions = []; //array of word options objects\n\t\tthis.numBlanks = 0;\n\t\tthis.numDropped = 0; //intially equal to zero\n\t\tthis.droppedWords = []; // array of dropped words\n\t\tthis.lives = 3;\n\t\tthis.parent = new GameController();\n\t\tif (foundWords) {\n\t\t\tthis.foundWords = foundWords;\n\t\t\tthis.textToRender = this.extractWords();\n\t\t}\n\t\telse {\n\t\t\tthis.foundWords = null;\n\t\t\tthis.textToRender = this.findAndExtractWords();\n\t\t}\n\t}\n\n\tgetLives() {\n\t\treturn this.lives;\n\t}\n\n\n\tnewGame() {\n\t\tthis.parent.newGame();\n\t}\n\n\t//takes a drop and checks if it's true\n\thandleDrop(droppedWord, droppedIn, correctDrop) {\n\t\t////console.log(\"droppedWord: \" + droppedWord + \", droppedIn: \" + droppedIn);\n\n\t\tlet newWordObj = {\n\t\t\tword: droppedWord,\n\t\t\tdroppedIn: droppedIn\n\t\t};\n\n\t\tif (droppedIn === correctDrop) {\n\t\t\tnewWordObj.correct = true;\n\t\t}\n\t\t//incorrect drop, subtract life and return false\n\t\telse {\n\t\t\tnewWordObj.correct = false;\n\t\t\treturn this.incorrectDrop();\n\t\t}\n\n\n\n\t\t//check if we already dropped the word, move it if so and stop\n\t\tif (this.checkMovedWord(droppedWord)) {\n\t\t\t//console.log(\"moved word\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\t//console.log(wordObj);\n\t\t\t\tif (wordObj.word === newWordObj.word) {\n\t\t\t\t\t//console.log(wordObj);\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//check if already filled the blank, change the word if so\n\t\telse if (this.checkAlreadyDropped(droppedIn)) {\n\t\t\t//console.log(\"already dropped\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\tif (wordObj.droppedIn === newWordObj.droppedIn) {\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//else add the word\n\t\telse {\n\t\t\tthis.droppedWords.push(newWordObj)\n\t\t}\n\n\t\treturn this.correctDrop();\n\n\t}\n\n\tcheckMovedWord(word) {\n\t\t//check to see if we have the word in our dropped word array\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.word === word) {\n\t\t\t\t//we already have the word\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//new word\n\t\treturn false;\n\t}\n\n\t//checks to see if the blank is alrFieady filled\n\t//returns true with already dropped, so need to update word\n\t//or false and need to add word\n\tcheckAlreadyDropped(dropID) {\n\t\t//check to see if we already dropped a word in this spot\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.droppedIn === dropID) {\n\t\t\t\t//we already filled the blank\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//blank is empty\n\t\treturn false\n\t}\n\n\n\n\t//handles a correct drop\n\tcorrectDrop() {\n\t\t//probably add word here\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tgoodSound.play();\n\t\t}\n\t\tlet done = this.checkDone();\n\t\tif (done) {\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t\treturn true;\n\t}\n\n\t//handles an incorrect drop\n\tincorrectDrop() {\n\t\t//subtract life\n\t\tthis.lives = this.lives - 1;\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tbadSound.play();\n\t\t}\n\t\tif (this.lives === 0) {\n\t\t\tthis.fail();\n\t\t}\n\t\telse {\n\n\t\t\t//THIS IS WHERE STRIKE ANIMATION FIRING CODE SHOULD GO\n\t\t\tstore.dispatch(strikeIn())\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t}\n\n\t//checks if we have filled all the blanks\n\tcheckDone() {\n\t\t//finally check if we've finished completing the tweet\n\t\t//console.log('checking to see if we completed the entire tweet');\n\t\tif (this.droppedWords.length === this.extractedWords.length) {\n\t\t\tthis.success();\n\t\t\treturn true;\n\t\t}\n\t\telse return false\n\t}\n\n\t//game is done and everything is correct\n\tasync success() {\n\t\tif (store.getState().ui.playSound === true) {\n\t\t\tsuccessSound.play();\n\t\t}\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Success'\n\t\tthis.parent.updateGame(this);\n\t\treturn true;\n\t}\n\n\n\n\t//game is done and not everything is correct\n\tasync fail() {\n\t\t//display some sort of failure message\n\t\t//proceed to next tweet\n\t\tthis.parent.updateGame(this);\n\t\tawait shredTweet();\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Fail'\n\t\tthis.parent.updateGame(this);\n\t}\n\n\n\t//takes an array of extracted words (objects) and updates numExtracted words\n\tsetExtractedWords(extractedWords) {\n\t\tthis.extractedWords = extractedWords;\n\t\tthis.numBlanks = extractedWords.length;\n\t}\n\n\t//takes array of word options (objects)\n\tsetWordOptions(wordOptions) {\n\t\tthis.wordOptions = wordOptions;\n\t}\n\n\t//set the correct\n\tsetCorrect(correct) {\n\t\tthis.correct = correct;\n\t}\n\n\t//set the done property\n\tsetDone(done) {\n\t\tthis.done = done;\n\t}\n\n\tstatic fromJSON(serializedJson) {\n\t\tlet newInstance = new FillBlank(serializedJson.curTweet, serializedJson.foundWords);\n\n\t\tif (newInstance.type !== 'NoWords') {\n\t\t\tnewInstance.type = 'FillBlank'\n\t\t}\n\t\tnewInstance.extractedWords = serializedJson.extractedWords; //array of extracted word objects\n\t\tnewInstance.wordOptions = serializedJson.wordOptions; //array of word options objects\n\t\tnewInstance.numBlanks = serializedJson.numBlanks;\n\t\tnewInstance.numDropped = serializedJson.numDropped; //intially equal to zero\n\t\tnewInstance.droppedWords = serializedJson.droppedWords; // array of dropped words\n\t\tnewInstance.lives = serializedJson.lives;\n\t\tnewInstance.parent = new GameController();\n\n\t\treturn newInstance;\n\t}\n\n\tfindAndExtractWords() {\n\t\treturn this.getRandomWords();\n\t}\n\n\t//pick which words we will eventually extract\n\tgetRandomWords() {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//construct regex to split string into all words\n\t\tlet allWordReg;\n\t\ttry { //try positive lookahead \n\t\t\tlet allWordExp =\n\t\t\t\t\"(?<!@)(?<=\\\\s|^|\\\\b)(?:[-’'%$#&\\\\/]\\\\b|\\\\b[-’'%$#&\\\\/]|[A-Za-z0-9]|\\\\([A-Za-z0-9]+\\\\))+(?=\\\\s|$|\\\\b)\";\n\t\t\tallWordReg = new RegExp(allWordExp, \"g\");\n\t\t}\n\t\tcatch { //revert to less robust exp if there's an error\n\t\t\tconsole.error('RegEx feature not supported, using fallback')\n\t\t\tlet allWordExp = \"([-’'%$#&\\\\/]\\\\b|\\\\b[-’'%$#&\\\\/]|[-A-Za-z0-9]|([A-Za-z0-9]+))*\"\n\t\t\tallWordReg = new RegExp(allWordExp, \"g\");\n\t\t}\n\n\n\t\t//use regex to create array of all words in tweet\n\t\tlet wordAr = text.match(allWordReg);\n\n\t\t//some issue with getting words - maybe all emojis or excalamation or something else\n\t\tif (wordAr === null) {\n\t\t\t//log an error and just return the text to avoid crash\n\t\t\tthis.type = 'NoWords';\n\t\t\treturn null;\n\t\t}\n\t\t//declare array to hold all words we extract\n\t\tlet extractedWordArray = [];\n\n\t\tlet numCheckedWords = 0;\n\n\t\t//determine how many words to extract based on number of characters\n\t\tlet numChar = text.length;\n\t\tlet numWordsToExtract = 1;\n\t\tif (numChar <= 50) {\n\t\t\tnumWordsToExtract = 1;\n\t\t} else if (numChar > 50 && numChar <= 150) {\n\t\t\tnumWordsToExtract = 2;\n\t\t} else if (numChar > 150 && numChar <= 2500) {\n\t\t\tnumWordsToExtract = 3;\n\t\t} else {\n\t\t\tnumWordsToExtract = 4;\n\t\t}\n\n\t\tusedIdx = [];\n\t\t//get 2 random words\n\t\tfor (let i = 0; i < numWordsToExtract; i++) {\n\t\t\t//get a random index and get the word at that index\n\t\t\tlet randIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\tlet extractedWord = wordAr[randIdx];\n\n\t\t\twhile (\n\t\t\t\tcheckValidWord(extractedWord, extractedWordArray) === false &&\n\t\t\t\tnumCheckedWords < wordAr.length - 1\n\t\t\t) {\n\t\t\t\trandIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\t\textractedWord = wordAr[randIdx];\n\t\t\t\tnumCheckedWords++;\n\t\t\t}\n\n\n\t\t\tif (numCheckedWords === wordAr.length - 1) {\n\t\t\t\t//console.log(\"checked all the words\");\n\t\t\t\t//can't do FIB so resort to GuessAuthor\n\t\t\t\tthis.type = 'NoWords';\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tlet wordLex = new pos.Lexer().lex(extractedWord);\n\t\t\t\tlet taggedWord = tagger.tag(wordLex);\n\t\t\t\tlet wordPos = taggedWord[0][1];\n\n\t\t\t\tlet mappedPos = posMap[wordPos];\n\n\t\t\t\textractedWordArray.push({\n\t\t\t\t\tword: extractedWord,\n\t\t\t\t\tmappedPOS: mappedPos\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\t//we picked out words, next up: find them\n\t\treturn this.findWordsInText(extractedWordArray);\n\n\n\t}\n\n\t//take the words we want to find and then....find them in the text\n\tfindWordsInText(extractedWordArray) {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//declare array to keep track of words as we find them in the tweet\n\t\tlet foundWordArray = [];\n\n\t\tfor (let word of extractedWordArray) {\n\t\t\t//construct regex to search for the current word\n\t\t\tvar searchExtractedWord = `\\\\b${word.word}\\\\b`;\n\t\t\tvar regSearchExtractedWord = new RegExp(searchExtractedWord);\n\n\t\t\t//determine the indices of beginning and end of word\n\t\t\tlet startIdx = text.search(regSearchExtractedWord);\n\t\t\tlet endIdx = startIdx + word.word.length - 1;\n\n\t\t\t//push an object containing the found indices and the word itself\n\t\t\tfoundWordArray.push({\n\t\t\t\tword: word.word,\n\t\t\t\tstart: startIdx,\n\t\t\t\tend: endIdx,\n\t\t\t\tpos: word.mappedPOS\n\t\t\t});\n\t\t}\n\n\t\t//sort the array so that smallest idx is first\n\t\tfoundWordArray.sort((a, b) => (a.start > b.start ? 1 : -1));\n\n\t\t//set property incase we need to re-extract later\n\t\t//console.log('setting foundWords')\n\t\tthis.foundWords = foundWordArray;\n\n\t\t//we have a sorted array of words we want to extract and their start/end indexes\n\t\treturn this.extractWords()\n\t}\n\n\textractWords() {\n\t\t//console.log('extractingWords');\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\tlet foundWordArray = this.foundWords;\n\n\t\tlet extractWordObjs = [];\n\n\t\t//loop through sorted found words and extract accordingly\n\t\tfor (let i = 0; i < foundWordArray.length; i++) {\n\t\t\tlet foundWord = foundWordArray[i];\n\t\t\textractWordObjs.push({\n\t\t\t\tword: foundWord.word,\n\t\t\t\torder: i,\n\t\t\t\tpos: foundWord.pos\n\t\t\t});\n\n\t\t\tvar searchFoundWord = `(\\\\b${foundWord.word})`;\n\t\t\tvar foundWordRegex = new RegExp(searchFoundWord);\n\n\t\t\t//replace the word with a blank placeholder\n\t\t\ttext = text.replace(foundWordRegex, \"*!*!%[need a blank here plzz]*!*!%\");\n\t\t\t////console.log(\"text after replace:\" + text);\n\t\t}\n\n\t\t//split text into array at seperators\n\t\tlet parts = text.split(\"*!*!%\");\n\n\t\t//array to hold all the jsx\n\t\tlet jsxAr = [];\n\n\t\t//iterator to keep track of what word we're replacing\n\t\tlet curWordIdx = 0;\n\n\t\tlet startIdx;\n\t\tif (parts[0] === '') {\n\t\t\tstartIdx = 1;\n\t\t}\n\t\telse {\n\t\t\tstartIdx = 0;\n\t\t}\n\n\t\tfor (let i = startIdx; i < parts.length; i++) {\n\t\t\t//insert fill in the blank compenent in at placeholder\n\t\t\tif (parts[i] === \"[need a blank here plzz]\") {\n\t\t\t\tjsxAr.push(\n\t\t\t\t\t<Blank\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\textractedWord={extractWordObjs[curWordIdx].word}\n\t\t\t\t\t\tblankOrder={extractWordObjs[curWordIdx].order}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t//increment curWordIdx iterator\n\t\t\t\tcurWordIdx++;\n\t\t\t}\n\t\t\t//or just put the text\n\t\t\telse {\n\t\t\t\tjsxAr.push(<span key={i}>{parts[i]}</span>);\n\t\t\t}\n\t\t}\n\n\t\tif (jsxAr.length < 2) {\n\t\t\tthis.parent.newGuessAuthor(this.curTweet);\n\t\t\treturn null;\n\t\t}\n\n\t\t//one correct word and three matching random incorrect words\n\t\tlet wordOptions = [];\n\t\tfor (let word of extractWordObjs) {\n\t\t\twordOptions.push({\n\t\t\t\tword: word.word,\n\t\t\t\torder: word.order\n\t\t\t});\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tlet randWord = Sentencer.make(`{{ ${word.pos} }}`);\n\t\t\t\tlet normedWord = normalizeCap(word.word, randWord);\n\t\t\t\twordOptions.push({\n\t\t\t\t\tword: normedWord,\n\t\t\t\t\torder: -1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\t\twordOptions = shuffle(wordOptions);\n\t\tthis.setWordOptions(wordOptions);\n\n\t\tthis.setExtractedWords(extractWordObjs);\n\n\t\t//console.log(jsxAr);\n\n\t\treturn jsxAr;\n\t}\n}\n\n//function that transforms the randomly generated word to match the case of the correct choice it corresponds to\nvar normalizeCap = (modelWord, normWord) => {\n\n\tlet character = '';\n\tlet i = 0;\n\tlet allCaps = true;\n\tlet normedChars = [];\n\twhile (i < modelWord.length) {\n\t\tcharacter = modelWord.charAt(i);\n\n\t\tif (!isNaN(character * 1)) {\n\t\t\talert('character is numeric');\n\t\t} else {\n\t\t\tif (character === character.toUpperCase()) {\n\t\t\t\t//character is uppercase\n\t\t\t\t//need to make sure normWord is not shorter than modelWord\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (character === character.toLowerCase()) {\n\t\t\t\t//character is lowercase\n\t\t\t\tallCaps = false;\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t//capitalize the rest of normWord if the model word is all caps\n\tif (allCaps === true) {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\ti++;\n\t\t}\n\t}\n\telse {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i];\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn normedChars.join('');\n}\n\nvar shuffle = (array) => {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n\n//private function to get a random index from the text word array\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n\t////console.log(\"usedIdx: \" + usedIdx);\n\tlet newIdx = Math.floor(Math.random() * Math.floor(max));\n\twhile (usedIdx.includes(newIdx) && usedIdx.length < max) {\n\t\tnewIdx = Math.floor(Math.random() * Math.floor(max));\n\t}\n\tusedIdx.push(newIdx);\n\treturn newIdx;\n};\n\n//private function to make sure the word is good\nvar checkValidWord = (word, extractedWordArray) => {\n\t//need word to be at least 2 characters\n\tif (word.length < 3) {\n\t\treturn false;\n\t}\n\t//don't get the same word twice\n\tif (extractedWordArray.includes(word)) {\n\t\treturn false;\n\t}\n\t//only want nouns, adj, and verbs\n\tlet wordLex = new pos.Lexer().lex(word);\n\tlet taggedWord = tagger.tag(wordLex);\n\tlet wordPos = taggedWord[0][1];\n\tif (\n\t\twordPos !== \"NN\" &&\n\t\twordPos !== \"NNS\" &&\n\t\twordPos !== \"JJ\" &&\n\t\twordPos !== \"JJR\" &&\n\t\twordPos !== \"JJS\" &&\n\t\twordPos !== \"VB\" &&\n\t\twordPos !== \"VBN\" &&\n\t\twordPos !== \"VBD\" &&\n\t\twordPos !== \"VBG\" &&\n\t\twordPos !== \"VBP\" &&\n\t\twordPos !== \"VBZ\"\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n","import React from 'react'\nimport GameController from './../classes/GameController';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { tweetOut, optionsOut, tweetIn } from '../actions';\n\nimport clickFile from './../sound/click.mp3';\n\nlet clickSound = new Audio(clickFile);\n\nlet gameController = new GameController();\n\nlet dispatch;\n\n\n\nlet animateAndNext = async (fail) => {\n    if(playSound === true) {\n        clickSound.play();\n    }\n    if (fail === true) {\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n            dispatch(tweetIn());\n        }, 200);\n    }\n    else {\n        dispatch(tweetOut());\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n        }, 200);\n    }\n}\n\nlet playSound = true;\n\nconst TweetNav = () => {\n\n    dispatch = useDispatch();\n\n    let curGame = useSelector(state => state.game.curGame);\n    playSound = useSelector(state => state.ui.playSound);\n\n    let message = 'Tweet completed.';\n\n    let fail = false;\n\n    if (curGame !== null) {\n        if (curGame.type === 'Complete') {\n            if (curGame.status === 'Fail') {\n                fail = true;\n                message = 'Fail. Keep moving.'\n            }\n\n        }\n    }\n\n    return (\n        <div className=\"tweet-nav-wrapper\">\n            <h2 className='tweet-nav-title'>{message}</h2>\n            <button className='tweet-nav-button small-text' onClick={() => animateAndNext(fail)}>NEXT &#x27AA;</button>\n        </div>\n    )\n}\n\nexport default TweetNav","import store from './../index';\nimport GameController from './GameController';\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport { strikeIn } from '../actions';\n\nimport shredTweet from './../utilities/ShredTweet';\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\n\nexport default class GuessAuthor {\n    constructor(newTweet) {\n\n        console.log(\"constructing GuessAuthor\");\n        this.curTweet = newTweet;\n        this.type = 'GuessAuthor';\n\n        this.friendOptions = [];\n        this.lives = 3;\n\n        this.parent = new GameController();\n    }\n\n    getLives() {\n        return this.lives;\n    }\n\n    newGame() {\n        //invoke method from GameController\n        this.parent.newGame();\n    }\n\n    //return 5 random friends\n    async getRandomFriends(friendList, init) {\n        let state;\n        let friends = null;\n        if (store !== undefined) {\n            state = store.getState();\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = state.game.parsedFriends;\n            }\n        }\n        else {\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = await this.parent.fetchAllFriends();\n            }\n        }\n\n        console.log(friends);\n\n        let correctAuthor = this.curTweet.user;\n\n        correctAuthor.correct = true;\n\n        let friendOptions = [];\n\n        friendOptions.push(correctAuthor);\n\n        for (let i = 0; i < 5; i++) {\n            if (friends !== null) {\n                let randIdx = getRandomUniqueIndex(friends.length - 1);\n                let randFriend = friends[randIdx];\n                while (randFriend.handle === correctAuthor.handle) {\n                    randIdx = getRandomUniqueIndex(friends.length - 1);\n                    randFriend = friends[randIdx];\n                }\n                randFriend.correct = false;\n                friendOptions.push(randFriend);\n            }\n        }\n\n        friendOptions = shuffle(friendOptions);\n\n        this.friendOptions = friendOptions;\n\n        if (!init) {\n            this.parent.updateGame(this);\n        }\n    }\n\n\n    handleDrop(correct) {\n        //correct drop! do some things\n        if (correct) {\n            if (store.getState().ui.playSound === true) {\n                goodSound.play();\n            }\n            this.success();\n        }\n        //incorrect drop! do some other things\n        else if (!correct) {\n            this.incorrectDrop();\n        }\n    }\n\n    incorrectDrop() {\n        //subtract life\n        this.lives = this.lives - 1;\n        if (store.getState().ui.playSound === true) {\n\t\t\tbadSound.play();\n\t\t}\n        if (this.lives === 0) {\n            this.fail();\n        }\n        else {\n            //THIS IS WHERE STRIKE ANIMATION FIRING CODE SHOULD GO\n            store.dispatch(strikeIn());\n            this.parent.updateGame(this);\n        }\n    }\n\n    async success() {\n        //get the next tweet\n        if (store.getState().ui.playSound === true) {\n\t\t\tsuccessSound.play();\n\t\t}\n        await this.parent.animateOut();\n        this.status = 'Success'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n    }\n\n    async fail() {\n        //display some sort of failure message\n        //proceed to next tweet\n        this.parent.updateGame(this);\n        await shredTweet();\n        await this.parent.animateOut();\n        this.status = 'Fail'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n        \n    }\n\n    static fromJSON(serializedJson) {\n        let newInstance = new GuessAuthor(serializedJson.curTweet);\n        newInstance.parent = new GameController();\n        newInstance.type = 'GuessAuthor';\n        return newInstance;\n    }\n\n}\n\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n    let newIdx = Math.floor(Math.random() * Math.floor(max));\n    while (usedIdx.includes(newIdx) && usedIdx.length < max) {\n        newIdx = Math.floor(Math.random() * Math.floor(max));\n    }\n    usedIdx.push(newIdx);\n    return newIdx;\n};\n\nvar shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}","import FillBlank from './FillBlank';\nimport GuessAuthor from './GuessAuthor';\nimport store from '../index';\nimport {\n  updateParsedTweets,\n  updateCurGame,\n  setDataAndInitGame,\n  tweetOut,\n  optionsOut\n} from \"../actions\";\nimport { toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar he = require('he');\n\nexport default class GameController {\n\n  //fetch data and create a new game\n  async init() {\n    //console.log(\"init\")\n    let tweets = await this.fetchNewTweets();\n    let friends = await this.fetchAllFriends();\n    let newGame = await this.newGame(true, tweets, friends);\n    let lastTweetFetched = null;\n    if (tweets !== null && tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    if (newGame && tweets && friends) {\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    else {\n      if (tweets === null) {\n        newGame = {};\n        newGame.type = 'NoTweets';\n      }\n      console.error('problem in GameController.init()');\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    return Promise.resolve();\n  }\n\n  pickGame() {\n\n  }\n\n  async newGame(shouldReturn, tweets, friends) {\n    //console.log(\"creating new game\");\n    //determine FillBlank or GuessAuthor psuedo randomly and instantiate\n    let state = store.getState();\n    //get all the tweets\n    let allTweets;\n    if (tweets) {\n      //console.log('using tweets parameter');\n      allTweets = tweets;\n    }\n    else {\n      //console.log('using tweets from state')\n      allTweets = state.game.parsedTweets;\n    }\n\n    if (allTweets && allTweets.length > 0) {\n      //remove the first one and save it (will be used to create new game)\n      let firstTweet = allTweets.splice(0, 1);\n      //determine FillBlank or GuessAuthor\n      let randomNumber = pickRandomNumber();\n      let newGame;\n      if (randomNumber <= 2) {\n        //instantiate FillBlank game\n        newGame = new FillBlank(firstTweet[0])\n\n        if (newGame.type === 'NoWords') {\n          newGame = new GuessAuthor(firstTweet[0]);\n          if (friends) {\n            newGame.getRandomFriends(friends);\n          }\n          newGame.getRandomFriends();\n        }\n      }\n      else {\n        //instantiate GuessAuthor game and make sure we get some random friends\n        newGame = new GuessAuthor(firstTweet[0]);\n        if (friends) {\n          newGame.getRandomFriends(friends);\n        }\n        newGame.getRandomFriends();\n      }\n\n      if (shouldReturn === true) {\n        return newGame;\n      }\n\n      else {\n        //call methods to update the store accordingly\n        this.updateTweets(allTweets);\n        this.updateGame(newGame);\n      }\n\n\n    }\n    else {\n      //console.log(\"out of tweets, fetching more\");\n      let newTweets = await this.fetchNewTweets();\n      console.log(newTweets);\n      //console.log(newTweets);\n      if (newTweets === null || Object.keys(newTweets).length < 1) {\n        console.error('Out of tweets in GameController.newGame()');\n        if (state.game.curGame !== null) {\n          state.game.curGame.type = 'NoTweets';\n        }\n        else {\n          state.game.curGame = {};\n          state.game.curGame.type = 'NoTweets';\n        }\n        toast.error(\"NO NEW TWEETS TO FETCH\", {\n          position: \"bottom-center\",\n          autoClose: 2000,\n          closeButton: false,\n          pauseOnHover: true,\n          draggable: false,\n          transition: Zoom,\n          hideProgressBar: true,\n          className:'toast',\n          bodyClassName: 'toast-container'\n        });\n        this.updateGame(state.game.curGame);\n      }\n      else {\n        //console.log('Got ' + Object.keys(newTweets).length - 1 + ' new tweets.')\n        this.updateTweets(newTweets);\n        this.newGame();\n      }\n\n    }\n  }\n\n  //method to handle when we can't get the tweets (either bad params, rate-limited, or simply no new tweets to fetch)\n  failFetchTweets() {\n\n  }\n\n  newGuessAuthor(tweet) {\n    //console.log(\"couldn't extract words, constructing GuessAuthor\");\n\n    let newGame = new GuessAuthor(tweet);\n    newGame.getRandomFriends(undefined, true);\n\n    return // also updates the store\n  }\n\n  updateTweets(tweets) {\n    let lastTweetFetched = null;\n    if (tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    store.dispatch(updateParsedTweets(tweets, lastTweetFetched));\n  }\n\n\n  //resolves after 1 second - need to adjust to accomodate different times\n  async animateOut() {\n    store.dispatch(tweetOut());\n    store.dispatch(optionsOut());\n\n    return new Promise(resolve => setTimeout(\n      () => {\n        resolve();\n      }, 300\n    ));\n  }\n\n  updateGame(newGame) {\n\n    store.dispatch(updateCurGame(newGame));\n\n  }\n\n  async fetchNewTweets(updateStore) {\n\n    let state = store.getState();\n    //console.log(\"fetchNewTweets\");\n\n    //only fetch if we have authenticated\n    if (state.user.userDetails !== null) {\n      //get our tokens from store\n      let userToken = state.user.userDetails.twitterProvider.token;\n      let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n      //get our last tweet id from store (null if first fetch)\n      let lastTweetFetched = state.game.lastTweetFetched;\n\n      if (userToken !== null && userTokenSecret !== null) {\n        return await fetch(\n          `https://slow-twitter.appspot.com/api/v1/timeline?aT=${userToken}&aTS=${userTokenSecret}${ // make the request\n          lastTweetFetched ? `&since=${lastTweetFetched}` : ``\n          }`,\n          { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n        )\n          .then(res => res.json())\n          .then(response => {\n            //make sure response not null\n            if (response) {\n              //console.log(response);\n              if (response.errors) {\n                console.error('errors fetching new tweets');\n                return null;\n              }\n              else {\n                let parsedTweets = parseRawTweets(response);\n                //push to store\n                if (updateStore) {\n                  this.updateTweets(parsedTweets)\n                }\n                else {\n                  return parsedTweets;\n                }\n              }\n\n            }\n            else {\n              return null;\n            }\n          })\n          .catch(res => {\n            //console.log(res);\n            return null;\n          });\n      } else {\n        console.error(\"Cannot refreshFeed, bad args\");\n\n      }\n    }\n  }\n\n\n  async fetchAllFriends() {\n    let allUserData = [];\n\n    //get first page of 20 users (wait for async fetch funtion)\n    let response = await fetchFriends();\n    //console.log(response);\n    let cursor;\n\n    //get susequent pages of users\n    while (response && !response.errors && response.next_cursor !== -1) {\n      for (let user of response.users) {\n        allUserData.push(user);\n      }\n      cursor = response.next_cursor_str;\n      response = await fetchFriends(cursor);\n      //console.log(response);\n    }\n\n    //make sure we got some data\n    if (allUserData.length > 0) {\n      //send to parser function\n      let parsedFriends = parseRawFriends(allUserData);\n      //update store\n      return Promise.resolve(parsedFriends);\n    }\n    else {\n      console.error(\"allUserData empty after getAllFriends()\");\n      return Promise.resolve(null);\n    }\n  }\n\n}\n\nvar pickRandomNumber = () => {\n  return Math.floor(Math.random() * Math.floor(4));\n\n}\n\nconst fetchFriends = async (cursor) => {\n\n  let state = store.getState();\n\n  let userToken = state.user.userDetails.twitterProvider.token;\n  let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n\n  if (userToken !== null && userTokenSecret !== null) {\n    return await fetch(\n      `https://slow-twitter.appspot.com/api/v1/friends/list?aT=${userToken}&aTS=${userTokenSecret}${cursor ? `&cursor=${cursor}` : ``}`, //don't change this plz\n      { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n    )\n      .then(res => res.json())\n      .then(response => {\n        //make sure it's not null\n        if (response.errors) {\n          console.error('could not fetch response');\n          console.error(response.errors);\n          return null;\n        }\n        else return response;\n      })\n      .catch(err => {\n        console.error(err);\n        return null\n      });\n  }\n  else {\n    console.error(\"user not auth in fetchFriends()\");\n    return Promise.resolve();\n  }\n\n}\n\nvar parseRawFriends = (rawFriends) => {\n  let parsedFriends = [];\n  //make sure we got em\n  if (rawFriends) {\n    for (let user of rawFriends) {\n      parsedFriends.push({\n        name: user.name,\n        pic: user.profile_image_url,\n        handle: user.screen_name\n      });\n    }\n\n    //push to store\n    return parsedFriends;\n\n  }\n\n  else {\n    console.error(\"rawFriends empty in parseRawFriends()\")\n  }\n}\n\n//take raw response from tweets and construct well-formed object with only needed info\nconst parseRawTweets = rawTweets => {\n  let newTweets = [];\n  //first tweet will have id of 0\n  for (let tweet of rawTweets) {\n    //throw out if the tweet is a retweet\n    if (tweet.retweeted_status) {\n      //console.log(\"Tweet not parsed; is a retweet\");\n    } else if (tweet.in_reply_to_status_id !== null) {\n      //console.log(\"Tweet not parsed; is a reply\");\n    } else {\n      //construct the object\n      let newTweet = {};\n      newTweet.date = tweet.created_at;\n      newTweet.tweetID = tweet.id_str;\n      newTweet.text = he.decode(tweet.full_text); //make sure that the text is unescaped\n      newTweet.urls = null;\n      if (tweet.entities.urls.length > 0) {\n        newTweet.urls = tweet.entities.urls;\n      }\n      if (newTweet.urls !== null) {\n        for (let url of newTweet.urls) {\n          newTweet.text = newTweet.text.replace(url.url, \"\");\n        }\n      }\n\n      newTweet.user = {};\n      newTweet.user.name = tweet.user.name;\n      newTweet.user.pic = tweet.user.profile_image_url;\n      newTweet.user.handle = tweet.user.screen_name;\n\n      //check for media of any type\n      if (tweet.extended_entities) {\n        newTweet.media = [];\n        newTweet.hasMedia = true;\n        for (let i = 0; i < tweet.extended_entities.media.length; i++) {\n          newTweet.media[i] = {};\n          newTweet.media[i].type = tweet.extended_entities.media[i].type;\n          //remove the in-text media link from the tweet text\n          newTweet.text = newTweet.text.replace(\n            tweet.extended_entities.media[i].url,\n            \"\"\n          );\n          if (newTweet.media[i].type === \"photo\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].media_url_https;\n          } else if (newTweet.media[i].type === \"video\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          } else if (newTweet.media[i].type === \"animated_gif\") {\n            //render as a video\n            newTweet.media[i].type = \"video\";\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          }\n          //NEED TO CHECK FOR OTHER TYPES OF MEDIA\n        }\n      } else {\n        newTweet.hasMedia = false;\n      }\n\n      //check for quote tweet\n      if (tweet.is_quote_status === true) {\n        newTweet.isQuote = true;\n\n        newTweet.quoteTweet = {};\n        newTweet.quoteTweet.text = he.decode(tweet.quoted_status.full_text); //make sure string is unescaped\n        newTweet.quoteTweet.date = tweet.quoted_status.created_at;\n        newTweet.quoteTweet.tweetID = tweet.quoted_status.id_str;\n        newTweet.quoteTweet.urls = null;\n        if (tweet.quoted_status.entities.urls.length > 0) {\n          newTweet.quoteTweet.urls = tweet.quoted_status.entities.urls;\n        }\n        if (newTweet.quoteTweet.urls !== null) {\n          for (let url of newTweet.quoteTweet.urls) {\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(\n              url.url,\n              \"\"\n            );\n          }\n        }\n\n        newTweet.quoteTweet.user = {};\n        newTweet.quoteTweet.user.name = tweet.quoted_status.user.name;\n        newTweet.quoteTweet.user.pic =\n          tweet.quoted_status.user.profile_image_url;\n        newTweet.quoteTweet.user.handle = tweet.quoted_status.user.screen_name;\n\n        //check for quote tweet media\n        //check for media of any type\n        if (tweet.quoted_status.extended_entities) {\n          console.log(\"quoteTweet has media!\");\n          console.log(tweet.quoted_status);\n          newTweet.quoteTweet.media = [];\n          newTweet.quoteTweet.hasMedia = true;\n          for (let i = 0; i < tweet.quoted_status.extended_entities.media.length; i++) {\n            //remove the in-text media link from the tweet text\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(tweet.quoted_status.extended_entities.media[i].url, \"\");\n            newTweet.quoteTweet.media[i] = {};\n            newTweet.quoteTweet.media[i].type = tweet.quoted_status.extended_entities.media[i].type;\n            if (newTweet.quoteTweet.media[i].type === \"photo\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[i].media_url_https;\n            } else if (newTweet.quoteTweet.media[i].type === \"video\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[\n                  i\n                ].video_info.variants[0].url;\n            }\n          }\n        } else {\n          newTweet.quoteTweet.hasMedia = false;\n        }\n      } else {\n        newTweet.isQuote = false;\n      }\n\n      //put at the beginning of newTweets[] for oldest tweets first only if we have text to work with\n      if (newTweet.text.length > 0 && newTweet.isQuote === false) {\n        newTweets.unshift(newTweet);\n      } else if (newTweet.isQuote === true) {\n        if (newTweet.text.length > 0 && newTweet.quoteTweet.text.length > 0) {\n          newTweets.unshift(newTweet);\n        }\n      } else {\n        //console.log(\n          //\"TWEET PROCESSED BUT HAD NO TEXT AT THE END OF parseRawTweets()\"\n        //);\n      }\n    }\n  }\n  console.log(newTweets);\n\n  return newTweets;\n\n};","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\n\nconst DragWord = props => {\n  let fibGame = useSelector(state => state.game.curGame);\n\n\n  const word = props.word;\n  const order = props.order;\n  let strike = false;\n  let opacity = 1;\n\n  let content = null;\n\n\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { value: word, order: order, type: \"word\" },\n    //called after word is dropped\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      //check if the item and dropResult exist\n      if (item && dropResult) {\n        strike = true;\n        //call function to check order and word correctness\n        fibGame.handleDrop(item.value, dropResult.order, item.order);\n      }\n    },\n    options: {\n      dropEffect: 'copy'\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  opacity = isDragging ? 0.4 : 1;\n\n\n  if (fibGame !== null) {\n    //check if word is one of the already dropped ones, and if so then strike it out\n    for (let wordObj of fibGame.droppedWords) {\n      if (wordObj.word === word) {\n        strike = true;\n        opacity = 0.5;\n      }\n    }\n  }\n\n  //switch strike based on whether word has been dropped\n  const textDecoration = strike ? 'line-through' : 'none';\n\n\n\n  if (word !== null) {\n    content = (\n      <div className=\"word-wrapper\">\n        <div ref={drag} style={{ opacity, textDecoration }} className=\"word-drag\">\n          {word}\n        </div>\n      </div>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default DragWord;\n","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\n\nconst DragAuthor = props => {\n    let authorGame = useSelector(state => state.game.curGame);\n\n    const name = props.name;\n    const url = props.url;\n    const handle = props.handle;\n    const time = props.time;\n    const correct = props.correct;\n\n    let content = null;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { author: { name: name, url: url, handle: handle, time: time }, correct: correct, type: \"author\" },\n        //called after word is dropped\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult();\n            //check if the item and dropResult exist\n            if (item && dropResult) {\n                //call function to check order and word correctness\n                authorGame.handleDrop(item.correct);\n            }\n        },\n        options: {\n            dropEffect: 'copy'\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n            isOver: monitor.isOverTarget(),\n            dragCoords: monitor.getSourceClientOffset()\n        })\n    });\n\n    const opacity = isDragging ? 0.4 : 1;\n\n    content = (\n        <div className=\"author-drag\" style={{opacity}}>\n            <h3 className={\"tweet-info-name\"} ref={drag}>{name} <span className={\"tweet-info-details\"}> @{handle}</span></h3>\n        </div>\n    );\n\n    return <Fragment>{content}</Fragment>\n\n}\n\nexport default DragAuthor;","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport DragWord from './DragWord';\nimport DragAuthor from './DragAuthor';\n\nconst DragOptions = () => {\n    let game = useSelector(state => state.game.curGame);\n\n    \n\n    let className = 'drag-options-container double';\n\n    let content = null;\n    if (game !== null) {\n        if (game.type === 'FillBlank') {\n            if (game.wordOptions.length > 0) {\n            \n                content =\n                    game.wordOptions.map((word, key) =>\n                        <DragWord word={word.word} order={word.order} key={key} />\n                    );\n            }\n        }\n\n        else if (game.type === \"GuessAuthor\") {\n            if (game.friendOptions.length > 0) {\n                className = 'drag-options-container'\n                content = game.friendOptions.map((user, key) => \n                    <DragAuthor key={key} name={user.name} url={user.pic} handle={user.handle} correct={user.correct} />\n                );\n                \n            }\n        }\n        else {\n            console.error(\"Game type not recognized in DragOptions\")\n        }\n    }\n\n    return (\n        <div className={className}>\n            {content}\n        </div>\n    )\n}\nexport default DragOptions","import React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { strikeOut } from './../actions';\n\n\nconst Lives = () => {\n    const curGame = useSelector(state => state.game.curGame);\n    const anim = useSelector(state => state.ui.strikeBounce);\n\n    let dispatch = useDispatch();\n\n    let content = [];\n\n\n    if (curGame !== null) {\n        content.push(<h2 className=\"lives\" key={100}>Strikes:</h2>);\n\n        let strikes = 3 - curGame.lives;\n        let numIcons = 0;\n        for (let i = 0; i < strikes; i++) {\n            content.push(\n                <CSSTransition\n                in={anim}\n                classNames='strike'\n                timeout={400}\n                onEntered={() => dispatch(strikeOut())}\n                appear={true}\n            >\n                <h2 className='strike' key={numIcons}>&#x2715;</h2>\n                </CSSTransition>\n            );\n            numIcons++;\n        }\n\n        for (let i = numIcons; i < 3; i++) {\n            content.push(<h2 className='strike-left' key={i}>&#x2715;</h2>);\n        }\n    }\n    else {\n        content = null;\n    }\n\n    return (\n\n            <div className=\"lives-wrapper\">\n                {content}\n            </div>\n\n    );\n}\nexport default Lives","import React from 'react';\nimport {playSound, muteSound, showInfo} from './../actions';\nimport {useSelector, useDispatch} from 'react-redux';\n\n\nimport soundImage from './../img/sound.svg';\nimport muteImage from './../img/no_sound.svg';\nimport infoImage from './../img/info.svg';\n\nimport clickFile from './../sound/click.mp3';\nlet clickSound = new Audio(clickFile);\n\n\nconst Toolbar = () => {\n    let soundState = useSelector(state => state.ui.playSound);\n\n    let dispatch = useDispatch();\n\n    let toggleSound = () => {\n        if(soundState === true) {\n            dispatch(muteSound());\n        }\n        else {\n            dispatch(playSound());\n            clickSound.play();\n        }\n    }\n\n    let soundStateImage;\n    if(soundState === true) {\n        soundStateImage = soundImage;\n    }\n    else {\n        soundStateImage = muteImage;\n    }\n\n    return (\n        <div className='bottom-toolbar'>\n            <img alt=\"Clickable icon to mute sound\" src={soundStateImage} className='sound-image toolbar-image' onClick={() => toggleSound()}></img>\n            <img alt=\"Clickable icon to show information about this application\" src={infoImage} className='info-image toolbar-image' onClick={() => {\n                    if(soundState === true) {\n                        clickSound.play();\n                    }\n                    dispatch(showInfo())\n                }}></img>\n        </div>\n    );\n}\n\nexport default Toolbar;","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideInfo } from './../actions';\n\nimport clickFile from './../sound/click.mp3';\nlet clickSound = new Audio(clickFile);\n\nconst Info = () => {\n    let soundState = useSelector(state => state.ui.playSound);\n    let dispatch = useDispatch();\n    return (\n        <Fragment>\n            <h2 className='info-title'>About this Site</h2>\n            \n            <p className='info-p'>My name is Isaac Sheets and I developed Easy Come, Easy Go as a commentary on the usage of infinite scroll on Twitter. Infinite scroll provides easy access to unlimited content and the user is never forced to take a step back and decide if they want to continue - the content is easy to get so it has less weight.</p>\n            <p className='info-p'>To reverse this concept, Easy Come, Easy Go slows down the interaction for the user and prompts them to actually engage with the content they see. The result is that the user can make a more intentional decision about the content the consume and the time they invest.</p>\n            <a className='info-link' target='_blank' rel=\"noopener noreferrer\" href='http://creative.colorado.edu/~issh3780/'>&#x2197; Check out my other work</a>\n            <a className='info-link' target='_blank' rel=\"noopener noreferrer\" href='https://www.linkedin.com/in/isaacsheets1'>&#x2197; Find me on LinkedIn</a>\n            <button className='small-text info-close-button' onClick={() => {\n                if(soundState === true) {\n                    clickSound.play();\n                }\n                dispatch(hideInfo())\n                }}>CLOSE</button>\n        </Fragment>\n    )\n}\n\nexport default Info;","import React, { Fragment } from \"react\";\nimport TwitterLogin from \"react-twitter-auth\";\nimport {\n  updateAuthentication,\n  updateToken,\n  updateUser,\n  logoutAndReset,\n  hideInfo,\n  optionsOut,\n  tweetIn,\n  tweetOut\n} from \"./../actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from 'react-modal';\n\nimport TweetCard from \"./TweetCard/TweetCard\";\nimport TweetNav from \"./TweetNav\";\nimport DragOptions from \"./DragOptions\";\nimport Lives from './Lives';\n\nimport GameController from '../classes/GameController';\nimport shredTweet from './../utilities/ShredTweet';\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport clickFile from './../sound/click.mp3';\nimport printFile from './../sound/print.mp3';\nimport successFile from './../sound/success.mp3';\nimport Toolbar from \"./Toolbar\";\nimport Info from \"./Info\";\n\nconst customStyles = {\n  content: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nModal.setAppElement('#root')\n\nlet clickSound = new Audio(clickFile);\nlet printSound = new Audio(printFile);\nlet successSound = new Audio(successFile);\n\nlet dispatch;\n\nlet gameController = new GameController();\n\nconst onFailedAuth = error => {\n  //console.log(\"Twitter auth failed :(\");\n  console.error(error);\n};\n\nconst onSuccessAuth = async (response) => {\n  const token = response.headers.get(\"x-auth-token\");\n  //console.log(response);\n  response.json().then(async user => {\n    //successful auth, update store\n    if (token) {\n      //console.log(\"User auth successful :)\");\n      if (playSound) {\n        successSound.play();\n      }\n\n      //dispatch the user object to store\n      dispatch(updateUser(user));\n      //dispatch the token to store\n      dispatch(updateToken(token));\n      //dispatch action to update authentication to store\n      dispatch(updateAuthentication(true));\n\n    }\n  });\n};\n\nconst logout = () => {\n  if (playSound) {\n    clickSound.play();\n  }\n\n  //set state to initial\n  dispatch(logoutAndReset());\n  //clear cache\n  localStorage.removeItem('state');\n}\n\nlet playSound = true;\nconst App = () => {\n  //get current state\n  const user = useSelector(state => state.user);\n  const game = useSelector(state => state.game);\n  let infoState = useSelector(state => state.ui.showInfo);\n  playSound = useSelector(state => state.ui.playSound);\n\n  let animateOptions = useSelector(state => state.ui.optionsIn);\n\n  let gameAdmin;\n  let gridStyle = 'main-grid';\n  let gridSpan = '';\n\n  let animation = 'fade';\n  let animationDur = 400;\n\n  if (animateOptions === false) {\n    animationDur = 200;\n  }\n\n  let playPrintSound = () => {\n    if (playSound) {\n      printSound.play();\n    }\n  }\n\n\n  if (user.isAuthenticated === true) {\n    if (game.curGame !== null) {\n      //we have a game\n      const sixHours = 6 * 60 * 60 * 1000;\n      if (Date.now() - game.lastTweetFetchDate > sixHours) {\n        //console.log(\"last fetched more than six hours ago, re-fetching and creating new game now now\")\n        gameController.init();\n\n        game.curGame = null;\n      }\n\n      //show some administration like next button or refresh\n      else if (game.curGame.type === 'Complete') {\n        animation = 'scale';\n        animationDur = 200;\n        gameAdmin = (<TweetNav />);\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n      else if (game.curGame.type === 'NoTweets') {\n        //this should probably be a new component\n        animation = 'none';\n        gameAdmin = (\n          <div className='no-new-tweets'>\n            <h2>No new tweets to fetch.</h2>\n            <h3>Try again later.</h3>\n            <button\n              onClick={() => {\n                if (playSound) {\n                  clickSound.play();\n                }\n                gameController.newGame();\n              }}\n              className=\"button\"\n            >\n              RETRY\n          </button>\n          </div>\n        );\n\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n    }\n    else {\n      gameController.init();\n    }\n  }\n\n\n  //check to see if we need to refresh\n\n  //init reference to dispatch\n  dispatch = useDispatch();\n\n\n  let content = null;\n\n  //console.log(\"using \" + animation + ' for options animation');\n\n  if (user.isAuthenticated && game.curGame !== null) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>COMPLETE-A-TWEET 2000</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile avatar' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div className={\"main-flex \" + gridStyle}>\n          <TweetCard />\n          <CSSTransition\n            in={animateOptions}\n            classNames={animation}\n            timeout={animationDur}\n            appear={true}\n          >\n            <div className={\"main-grid-col-2 \" + gridSpan + \" \" + animation}>\n              {game.curGame.type === 'Complete' || game.curGame.type === 'NoTweets' ?\n                <Fragment>\n                  <div className=\"span\">{gameAdmin}</div>\n                </Fragment>\n                :\n                <Fragment>\n                  <DragOptions />\n                  <Lives />\n                  <button className=\"small-text\" onClick={() => shredAndSkip()}>SHRED</button>\n                </Fragment>\n              }\n            </div>\n          </CSSTransition>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n    );\n\n  }\n\n  //loading after authentication\n  else if (user.isAuthenticated) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>COMPLETE-A-TWEET 2000</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile avatar' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div id=\"noTrespassingOuterBarG\">\n          <div id=\"noTrespassingFrontBarG\" class=\"noTrespassingAnimationG\">\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n          </div>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n    );\n\n  }\n\n  //initial view not signed in\n  else {\n    content = (\n      <div className=\"page-wrapper\">\n        <CSSTransition\n          in={true}\n          classNames={'fade-slow'}\n          timeout={1000}\n          appear={true}\n        >\n          <div className=\"top-bar\">\n            <div className=\"title\">\n              <h1>COMPLETE-A-TWEET 2000</h1>\n            </div>\n            <div className=\"user-info\">\n              <TwitterLogin\n                loginUrl=\"https://slow-twitter.appspot.com/api/v1/auth/twitter\" //second step\n                onFailure={onFailedAuth}\n                onSuccess={onSuccessAuth}\n                requestTokenUrl=\"https://slow-twitter.appspot.com/api/v1/auth/twitter/reverse\" //first step\n                className=\"twitter-login-button small-text\"\n                text=\"SIGN IN TO TWITTER\"\n                showIcon={false}\n              />\n            </div>\n          </div>\n        </CSSTransition>\n        <div className={\"main-flex rel\"}>\n          <CSSTransition\n            in={true}\n            classNames={'slide-up-slow'}\n            appear={true}\n            timeout={2000}\n            onEntering={() => playPrintSound()}\n            onEntered={() => printSound.pause()}\n          >\n            <div className=\"welcome-message-wrapper\">\n              <div className=\"welcome-message\">\n                <h2 className='section-title'>Welcome to Complete-a-Tweet 2000.</h2>\n                <p>This site will transform your Twitter feed into a series of mini-games.</p>\n                <p>Login to your Twitter account get started.</p>\n              </div>\n            </div>\n          </CSSTransition>\n        </div>\n        <Toolbar />\n        <Modal\n          isOpen={infoState}\n          onRequestClose={() => dispatch(hideInfo())}\n          style={customStyles}\n          contentLabel=\"About the site\"\n          overlayClassName='info-bg'\n          className=\"info-content\"\n        >\n          <Info />\n        </Modal>\n      </div>\n\n    );\n  }\n\n\n\n  return <Fragment>{content}</Fragment>;\n};\n\nvar shredAndSkip = async () => {\n\n  if(playSound) {\n    clickSound.play();\n  }\n  //wait for the tweet to shred\n  await shredTweet();\n  dispatch(optionsOut());\n  dispatch(tweetOut());\n  setTimeout(function () {\n      gameController.newGame();\n      dispatch(tweetIn());\n  }, 200);\n\n}\n\nexport default App;\n","const intialUser = {\n    isAuthenticated: false,\n    userDetails: null,\n    userToken: null\n}\n\nconst user = (state = intialUser, action) => {\n    switch(action.type) {\n        case 'RESET':\n            return intialUser\n        case 'SET_AUTHENTICATION':\n            return {\n                ...state,\n                isAuthenticated: action.isAuthenticated\n            }\n        case 'SET_USER':\n            return {\n                ...state,\n                userDetails: action.user\n\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                userToken: action.token\n            }\n        default:\n            return state\n    }\n}\n\nexport default user","const intialGame = {\n  lastTweetFetched: null,\n  parsedTweets: null,\n  curGame: null,\n  parsedFriends: null,\n  lastTweetFetchDate: null\n};\n\nconst game = (state = intialGame, action) => {\n  switch (action.type) {\n    case 'RESET':\n      return intialGame;\n    case \"INIT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame,\n        parsedFriends: action.parsedFriends,\n        parsedTweets: action.parsedTweets,\n        lastTweetFetchDate: action.lastTweetFetchDate,\n        lastTweetFetched: action.lastTweetFetched\n      }\n    case \"SET_CURRENT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame\n      };\n    case \"SET_LAST_TWEET_FETCHED\":\n      return {\n        ...state,\n        lastTweetFetched: action.lastFetched\n      };\n    case \"SET_PARSED_TWEETS\":\n      if (action.lastTweetFetched === null) {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate\n        };\n      }\n      else {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate,\n          lastTweetFetched: action.lastTweetFetched\n        };\n      }\n    case \"SET_PARSED_FRIENDS\":\n      return {\n        ...state,\n        parsedFriends: action.parsedFriends\n      };\n    default:\n      return state;\n  }\n};\n\nexport default game;","const intialLightbox = {\n    isVisible: false,\n    slide: 0\n  };\n  \n  const lightbox = (state = intialLightbox, action) => {\n    switch (action.type) {\n      case 'RESET':\n        return intialLightbox;\n      case \"TOGGLE_LB_VISIBLE\":\n        return {\n          ...state,\n          isVisible: !state.isVisible \n        };\n        case \"SET_LB_SLIDE\":\n        return {\n          ...state,\n          slide: action.slideNum\n        };\n     \n      default:\n        return state;\n    }\n  };\n  \n  export default lightbox;\n  ","const initialUI = {\n    tweetIn: true,\n    optionsIn: false,\n    showInfo: false,\n    playSound: true,\n    strikeBounce: false\n}\n\nconst ui = (state = initialUI, action) => {\n    switch (action.type) {\n        case 'RESET':\n            return initialUI;\n        case 'TWEET_IN_TRUE':\n            return {\n                ...state,\n                tweetIn: true\n            }\n        case 'TWEET_IN_FALSE':\n            return {\n                ...state,\n                tweetIn: false\n            }\n        case 'OPTIONS_IN_TRUE':\n            return {\n                ...state,\n                optionsIn: true\n\n            }\n        case 'OPTIONS_IN_FALSE':\n            return {\n                ...state,\n                optionsIn: false\n\n            }\n        case 'SHOW_INFO':\n            return {\n                ...state,\n                showInfo: true\n            }\n        case 'HIDE_INFO':\n            return {\n                ...state,\n                showInfo: false\n            }\n        case 'PLAY_SOUND':\n            return {\n                ...state,\n                playSound: true\n            }\n        case 'MUTE_SOUND':\n            return {\n                ...state,\n                playSound: false\n            }\n        case 'STRIKE_START':\n            return {\n                ...state,\n                strikeBounce: true\n            }\n        case 'STRIKE_STOP':\n            return {\n                ...state,\n                strikeBounce: false\n            }\n        default:\n            return state\n    }\n}\n\nexport default ui","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { toast } from 'react-toastify';\n\nimport { loadState, saveState } from \"./local-storage/localStorage\";\nimport throttle from \"lodash.throttle\";\n\nlet persistedState = loadState();\nconsole.log(persistedState);\nlet store;\n\ntoast.configure();\n\n//use persisted state if avail\nif (persistedState !== undefined) {\n\n  store = createStore(\n    rootReducer,\n    persistedState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n\n} \n//no state in local storage\nelse {\n  store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n}\n\nexport default store;\n\n//save state a maximum of once every second\nstore.subscribe(\n  throttle(() => {\n    saveState({\n      game: store.getState().game,\n      user: store.getState().user,\n      ui: store.getState().ui\n    });\n  }, 1000)\n);\n\nrender(\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);","import { combineReducers } from 'redux'\nimport user from './user'\nimport game from './game'\nimport lightbox from './lightbox'\nimport ui from './ui'\n\nexport default combineReducers({\n  user,\n  game,\n  lightbox,\n  ui\n})","import FillBlank from './../classes/FillBlank';\nimport GuessAuthor from '../classes/GuessAuthor';\n\nexport const loadState = () => {\n  //console.log(\"ATTEMPTING TO LOAD STATE\");\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    let parsedState = JSON.parse(serializedState);\n    //console.log(parsedState);\n    //need to reconstruct the class instance based on persisted properties if it exists\n    if (parsedState.game.curGame !== null) {\n      let gameFromJson = {};\n      if (parsedState.game.curGame.type === 'FillBlank') {\n        gameFromJson = FillBlank.fromJSON(parsedState.game.curGame);\n        //console.log(gameFromJson);\n        if(gameFromJson.type === 'NoWords') {\n          gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n          gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n        }\n      }\n      else if(parsedState.game.curGame.type === 'NoWords') {\n        //console.log('game type is NoWords, constructing GuessAuthor');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if (parsedState.game.curGame.type === 'GuessAuthor') {\n        //console.log('constructing new GuessAuthor game');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if(parsedState.game.curGame.type === 'Complete') {\n        gameFromJson.type = 'Complete';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n        gameFromJson.status = parsedState.game.curGame.status;\n      }\n      else if(parsedState.game.curGame.type === 'NoTweets') {\n        gameFromJson.type = 'NoTweets';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n      }\n      else {\n        console.error(\"Game type not caught in localStorage.js\");\n      }\n\n      parsedState.game.curGame = gameFromJson;\n    }\n    return parsedState;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  //console.log(\"ATTEMPTING TO SAVE STATE\");\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};","module.exports = __webpack_public_path__ + \"static/media/success.6ba16415.mp3\";","module.exports = __webpack_public_path__ + \"static/media/print.1d3d03ec.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bad.ef6e1241.mp3\";","module.exports = __webpack_public_path__ + \"static/media/type.92cc9868.mp3\";"],"sourceRoot":""}