{"version":3,"sources":["NewClassForm.js","TodoItem.js","TodoList.js","Timer.js","ClassItem.js","App.js","serviceWorker.js","index.js","delete.svg"],"names":["NewClassForm","textInput","classInput","onButtonClick","this","props","onClick","buttonCLick","e","preventDefault","hidePopup","react_default","a","createElement","className","src","deleteIcon","alt","type","placeholder","ref","input","Component","TodoItem","_this","todos","classIndex","deleteTodo","length","map","item","index","key","onChange","todoCheck","style","checked","textDecoration","name","TodoList","addTodo","TodoItem_TodoItem","parseTodo","value","newTodo","Timer","countdown","countDownString","ClassItem","classes","deleteClass","Timer_Timer","TodoList_TodoList","todoFunc","Rebase","require","firebase","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","database","base","createClass","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","bind","assertThisInitialized","handleTodoCheck","addClass","showHide","classesCopy","time","date","Date","console","log","getTime","newClass","dateOfTest","push","setState","post","data","timerInterval","setInterval","timer","fetch","context","asArray","then","clearInterval","forEach","distance","alert","days","Math","floor","_hour","hours","_minute","minutes","_second","seconds","todoIndex","status","splice","NewClassForm_NewClassForm","ClassItem_ClassItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d06e69b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport deleteIcon from './delete.svg'\n\nexport default class NewClassForm extends Component {\n\n\n\n\trender() {\n\t\tvar textInput;\n\t\tvar classInput;\n\n\t\tfunction handleKeyPress(event) {\n\t\t\tif(event.key === 'Enter'){\n\t\t\t\tthis.props.onButtonClick(event, textInput, classInput);\n\t\t\t}\n\t\t}\n\n\t\tconst onButtonClick = this.props.onButtonClick;\n\t\tconst onClick = this.props.onClick\n\n\n\t\tfunction buttonCLick(e)\n\t\t{\n\t\t\te.preventDefault();\n\t\t\tonButtonClick(textInput, classInput);\n\t\t\tonClick();\n\t\t}\n\n\t\tfunction hidePopup(e) {\n\t\t\te.preventDefault();\n\t\t\tonClick();\n\t\t}\n\n\t\treturn(\n\t\t\t<div className=\"addClassForm\">\n\t\t\t<img \n\t\t\tsrc={deleteIcon} \n\t\t\talt=\"Delete Class\" \n\t\t\tclassName=\"ExitAddClass\"\n\t\t\tonClick={e => hidePopup(e)}></img>\n\t\t\t<h2>Add Class</h2>\n\t\t\t<form className=\"inputForm\">\n\t\t\t<input className=\"classNameEnter\"type=\"text\" placeholder=\"class name\" ref={input => classInput=input}></input>\n\t\t\t<input className=\"timeDate\"type=\"datetime-local\" ref={input => textInput=input}></input> \n\t\t\t<button onClick={e => buttonCLick(e)} className=\"addClass\">add</button>\n\n\t\t\t</form>\n\t\t\t</div>\n\t\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport deleteIcon from './delete.svg'\n\nexport default class TodoItem extends Component {\n\trender() {\n\n\t\tconst todos = this.props.todos;\n\t\tconst classIndex = this.props.classIndex;\n\t\tconst deleteTodo = this.props.deleteTodo;\n\n\n\t\tfunction todoStrike(checked) {\n\t\t\treturn {\n\t\t\t\ttextDecoration: checked ? 'line-through' : 'none',\n\t\t\t};\n\t\t}\n\n\t\tif(!todos || todos.length === 0) {\n\t\t\treturn(<h4>Add something todo</h4>);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t{todos.map((item, index) =>\n\t\t\t\t<li className=\"todoItem\" key={index}>\n\t\t\t\t<input \n\t\t\t\ttype=\"checkbox\" \n\t\t\t\tclassName=\"todoCheck\" \n\t\t\t\tonChange={() => this.props.todoCheck(classIndex, index)}>\n\t\t\t\t</input>\n\t\t\t\t<p \n\t\t\t\tclassName=\"todoTitle\"\n\t\t\t\tstyle={todoStrike(item.checked)} >\n\t\t\t\t{item.name}\n\t\t\t\t</p>\n\t\t\t\t<img src={deleteIcon} alt=\"Delete Todo\" onClick={() => deleteTodo(classIndex, index)} className=\"deleteIcon\"></img>\n\t\t\t\t</li>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t);\n\t}\n\n\n}\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n\n\n\n\trender() {\n\t\tvar textInput;\n\n\t\t//rename props for easier use\n\t\tconst addTodo = this.props.addTodo;\n\t\tconst classIndex = this.props.index;\n\t\tconst todos = this.props.todos;\n\n\t\tfunction handleKeyPress(event) {\n\t\t\tconsole.log(\"handle keypress called\");\n\t\t\tif(event.key === 'Enter'){\n\t\t\t\tparseTodo(event);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"todoList\">\n\t\t\t<h3 className=\"todoListTitle\">Todo List</h3>\n\t\t\t<ul>\n\t\t\t<TodoItem \n\t\t\ttodos = {todos}\n\t\t\tclassIndex = {classIndex}\n\t\t\ttodoCheck = {this.props.todoCheck}\n\t\t\tdeleteTodo = {this.props.deleteTodo}\n\t\t\t/>\n\t\t\t</ul>\n\t\t\t<div className=\"addTodoForm\">\n\t\t\t<input className=\"enterTodoItem\" type=\"text\" ref={input => textInput=input}></input>\n\t\t\t<button onClick={e => parseTodo(e)} className=\"addTodo\">add todo</button>\n\t\t\t</div>\n\t\t\t</div>\t\n\t\t\t);\n\n\n\t\t//create the new todo item from user input and send it back to add todo via props\n\t\tfunction parseTodo(e) {\n\t\t\te.preventDefault();\n\t\t\tif (textInput.value.length !== 0) {\n\t\t\t\tconst newTodo = {\n\t\t\t\t\tname: textInput.value,\n\t\t\t\t\tchecked: false\n\t\t\t\t};\n\t\t\t\ttextInput.value = '';\n\t\t\t\taddTodo(newTodo, classIndex);\n\n\t\t\t}\n\t\t}\n\n\t}\n}","import React, { Component } from 'react';\n\nexport default class Timer extends Component {\n\n\n\n\n\trender() {\n\t\tconst countdown = this.props.countDownString;\n\n\n\n\t\treturn (\n\t\t\t<div className=\"timer\">\n\t\t\t<h3 className=\"timerTitle\">Time Until Test</h3>\n\t\t\t<h4 className=\"countdown\">{countdown}</h4>\n\t\t\t</div>\n\t\t\t);\n\n\n\t}\n}","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport Timer from './Timer';\nimport deleteIcon from './delete.svg'\n\nexport default class ClassItem extends Component {\n\n\n\n\trender() {\n\t\tconst classes  = this.props.classes;\n\t\tconst deleteClass = this.props.deleteClass;\n\n\t\tif(!classes || classes.length === 0) {\n\t\t\treturn(<h2 className=\"noClasses\">Add a class to get started!</h2>);\n\t\t}\n\t\telse {\n\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t{classes.map((item, index) =>\n\t\t\t\t\t\t<div className=\"classItem\" key={index}>\n\t\t\t\t\t\t<h2 className=\"ClassName\">{item.className}</h2>\n\t\t\t\t\t\t<img \n\t\t\t\t\t\tsrc={deleteIcon} \n\t\t\t\t\t\talt=\"Delete Class\" \n\t\t\t\t\t\tonClick={() => deleteClass(index)}\n\t\t\t\t\t\tclassName=\"deleteClass\"></img>\n\t\t\t\t\t\t<div className=\"classGrid\">\n\t\t\t\t\t\t<Timer \n\t\t\t\t\t\tcountDownString={item.countDownString}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TodoList \n\t\t\t\t\t\taddTodo = {this.props.todoFunc}\n\t\t\t\t\t\ttodoCheck = {this.props.todoCheck}\n\t\t\t\t\t\tdeleteTodo = {this.props.deleteTodo}\n\t\t\t\t\t\tindex = {index}\n\t\t\t\t\t\ttodos = {item.todos}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n","import React, { Component } from 'react';\nimport NewClassForm from './NewClassForm';\nimport ClassItem from './ClassItem'\n\n  //firebase stuff\n  var Rebase = require('re-base');\n  var firebase = require('firebase/app');\n  require('firebase/database');\n  var config = {\n  \tapiKey: \"AIzaSyAHopfFrNrrdOrURhhGHHTjoAQwIYO6x5g\",\n  \tauthDomain: \"the-finals-countown.firebaseapp.com\",\n  \tdatabaseURL: \"https://the-finals-countown.firebaseio.com\",\n  \tprojectId: \"the-finals-countown\",\n  \tstorageBucket: \"the-finals-countown.appspot.com\",\n  \tmessagingSenderId: \"924389184060\"\n  };\n  var app = firebase.initializeApp(config);\n  var db = firebase.database(app);\n  var base = Rebase.createClass(db);\n\n  class App extends Component {\n\n  \tconstructor(props) {\n  \t\tsuper(props);\n  \t\tthis.state = {\n  \t\t\tclasses: [],\n  \t\t\tshow: false\n  \t\t};\n\n  \t\tthis.addTodo = this.addTodo.bind(this);\n  \t\tthis.handleTodoCheck = this.handleTodoCheck.bind(this);\n  \t\tthis.deleteTodo = this.deleteTodo.bind(this);\n  \t\tthis.deleteClass = this.deleteClass.bind(this);\n  \t\tthis.addClass = this.addClass.bind(this);\n  \t\tthis.showHide = this.showHide.bind(this);\n\n  \t}\n\n  \taddClass(textInput,classInput) {\n  \t\t\n  \t\tvar classesCopy = this.state.classes;\n\n  \t\tif(classInput.value.length !== 0)\n  \t\t{\n  \t\t\tif(textInput.value.length !== 0) {\n  \t\t\t\tvar time = textInput.value;\n  \t\t\t\tvar date = new Date(time);\n  \t\t\t\tconsole.log(date);\n  \t\t\t\tconsole.log(date.getTime());\n\n  \t\t\t\tconst newClass = {\n  \t\t\t\t\tclassName: classInput.value,\n  \t\t\t\t\tdateOfTest: date.getTime(),\n  \t\t\t\t\tcountDownString: \"\",\n  \t\t\t\t\ttodos: []\n  \t\t\t\t};\n\n  \t\t\t\tif(!classesCopy || classesCopy.length === 0) {\n  \t\t\t\t\tclassesCopy[0] = newClass;\n  \t\t\t\t}\n  \t\t\t\telse{classesCopy.push(newClass);}\n\n  \t\t\t\tthis.setState({\n  \t\t\t\t\tclasses: classesCopy\n  \t\t\t\t});\n\n  \t\t\t\ttextInput.value = '';\n  \t\t\t\tclassInput.value = '';\n\n\n  \t\t\t\tbase.post('classes', {\n  \t\t\t\t\tdata: this.state.classes\n  \t\t\t\t});\n  \t\t\t}\n  \t\t}\n\n  \t}\n\n\n\n  \tcomponentWillMount() {\n  \t\tthis.timerInterval = setInterval(this.timer.bind(this), 1000, true);\n\n\n  \t\tbase.fetch('classes', {\n  \t\t\tcontext: this,\n  \t\t\tasArray: true,\n  \t\t\tthen(data) {\n  \t\t\t\tconsole.log(data);\n  \t\t\t\tthis.setState ({\n\n  \t\t\t\t\tclasses: data\n  \t\t\t\t});\n  \t\t\t}\n  \t\t});\n  \t}\n\n  \tcomponentWillUnmount(){\n  \t\tclearInterval(this.timerInterval);\n  \t}\n\n\n  \ttimer() {\n\n  \t\tvar classesCopy = this.state.classes;\n  \t\tclassesCopy.forEach((item, index) => {\n\n  \t\t\tvar _second = 1000;\n  \t\t\tvar _minute = _second * 60;\n  \t\t\tvar _hour = _minute * 60;\n  \t\t\tvar _day = _hour * 24;\n\n  \t\t\tvar end = new Date(item.dateOfTest);\n  \t\t\tvar now = new Date();\n\n  \t\t\tvar distance = end - now;\n\n\n\n  \t\t\tif (distance < 0 ) {\n  \t\t\t\tif (item.countDownString !== \"Your \" + item.className + \" test already happened.\") {\n  \t\t\t\t\talert(\"It's time for your \" + item.className + \" test! Good Luck!\");\n  \t\t\t\t\titem.countDownString = \"Your \" + item.className + \" test already happened.\";\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse {\n\n  \t\t\t\tvar days = Math.floor(distance / _day);\n  \t\t\t\tvar hours = Math.floor((distance % _day) / _hour);\n  \t\t\t\tvar minutes = Math.floor((distance % _hour) / _minute);\n  \t\t\t\tvar seconds = Math.floor((distance % _minute) / _second);\n  \t\t\t\titem.countDownString = days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n  \t\t\t}\n\n\n  \t\t});\n\n\n  \t\tthis.setState ({\n  \t\t\tclasses: classesCopy\n  \t\t});\n\n  \t\t// base.post('classes', {\n  \t\t// \tdata: this.state.classes\n  \t\t// });\n\n  \t}\n\n  \taddTodo(newTodo, index) {\n\n  \t\tvar classesCopy = this.state.classes;\n      //check to see if todos[] array exists\n      if (!classesCopy[index].todos) {\n        //if it doesn't already exist then create the array\n        classesCopy[index].todos = [newTodo];\n    }\n    else {\n        //todos[] exists so just push\n        classesCopy[index].todos.push(newTodo);\n    }\n\n      //set state\n      this.setState({\n      \tclasses: classesCopy \n      });\n\n      //post to firebase\n      base.post('classes', {\n      \tdata: this.state.classes\n      });\n\n  }\n\n    //strike out a todo\n    handleTodoCheck(classIndex, todoIndex) {\n\n      //copy classes and get the current status of the checkbox\n      var classesCopy = this.state.classes;\n      var status = classesCopy[classIndex].todos[todoIndex].checked;\n\n      //if the box was already checked then set it to true and vice versa\n      if(status === false) {\n      \tclassesCopy[classIndex].todos[todoIndex].checked = true;\n      }\n      else {\n\n      \tclassesCopy[classIndex].todos[todoIndex].checked = false;\n      }\n\n      //set the state\n      this.setState({\n      \tclasses: classesCopy \n      });\n\n      //post to firebase\n      base.post('classes', {\n      \tdata: this.state.classes\n      });\n\n  }\n\n    //delete a todo item\n    deleteTodo(classIndex, todoIndex) {\n\n      //make a copy and delete the todo from the class at the specified index\n      var classesCopy = this.state.classes;\n      classesCopy[classIndex].todos.splice(todoIndex, 1);\n\n      //set the state\n      this.setState({\n      \tclasses: classesCopy \n      });\n\n      //post to firebase\n      base.post('classes', {\n      \tdata: this.state.classes\n      });\n\n  }\n\n    //delete a class object frome the classes array in state\n    deleteClass(index) {\n\n      //make a copy and remove the class at the specified index\n      var classesCopy = this.state.classes;\n      classesCopy.splice(index, 1);\n\n      //set the state\n      this.setState({\n      \tclasses: classesCopy \n      });\n\n      //post to firebase\n      base.post('classes', {\n      \tdata: this.state.classes\n      });\n\n  }\n\n  showHide(e)\n  {\n  \tthis.setState({\n  \t\tshow: !this.state.show\n  \t});\n  }\n\n\n\n\n  render() {\n  \treturn (\n  \t\t<div className=\"wrapper\">\n  \t\t<h1 className=\"title\">The Finals Countdown</h1>\n  \t\t<button className=\"addClassButton\" onClick = {this.showHide}>Add Class</button>\n  \t\t{\n  \t\t\tthis.state.show\n  \t\t\t?  <NewClassForm \n  \t\t\tonButtonClick={this.addClass}\n  \t\t\tonClick={this.showHide}/>\n  \t\t\t: null\n  \t\t}\n\n  \t\t<ClassItem \n  \t\tclasses={this.state.classes}\n  \t\ttodoFunc={this.addTodo}\n  \t\ttodoCheck ={this.handleTodoCheck}\n  \t\tdeleteTodo = {this.deleteTodo}\n  \t\tdeleteClass = {this.deleteClass}\n  \t\t/>\n  \t\t</div>\n  \t\t);\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/delete.4508fb67.svg\";"],"sourceRoot":""}