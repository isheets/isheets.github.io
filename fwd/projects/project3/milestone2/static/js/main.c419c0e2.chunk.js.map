{"version":3,"sources":["logo.svg","NewClassForm.js","TodoItem.js","TodoList.js","Timer.js","ClassItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewClassForm","react_default","a","createElement","className","type","placeholder","onClick","e","preventDefault","Component","TodoItem","TodoList","TodoItem_TodoItem","Timer","ClassItem","Timer_Timer","TodoList_TodoList","App","NewClassForm_NewClassForm","ClassItem_ClassItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wJCEnBC,0LAEnB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAEhBH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,eAC/BL,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACZJ,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACZJ,EAAAC,EAAAC,cAAA,UAAQI,QAAS,SAAAC,GAAMA,EAAEC,kBAAmBL,UAAU,YAAtD,gBAVuCM,cCArBC,mLAEnB,OACCV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACdH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWD,UAAU,cACjCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,gBACAH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,SAAAC,GAAMA,EAAEC,kBAAmBL,UAAU,YAAtD,uBANmCM,aCCjBE,mLAEnB,OACCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACU,EAAD,OAEAZ,EAAAC,EAAAC,cAAA,UAAQI,QAAS,SAAAC,GAAMA,EAAEC,kBAAmBL,UAAU,WAAtD,yBAVmCM,aCDjBI,mLAEnB,OACCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,sCAL+BO,aCEdK,mLAEnB,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,eAPmCP,aCcxBQ,mLAVX,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,wBACAH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,cANYV,aCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c419c0e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport default class NewClassForm extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"addClassForm\">\n\t\t\t<h2>Add Class</h2>\n\t\t\t<form className=\"inputForm\">\n\n\t\t\t<input type=\"text\" placeholder=\"class name\"></input>\n\t\t\t<input type=\"date\"></input>\n\t\t\t<input type=\"time\"></input>\n\t\t\t<button onClick={e => {e.preventDefault()}} className=\"addClass\">add</button>\n\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\n\nexport default class TodoItem extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<li className=\"todoItem\">\n\t\t\t<input type=\"checkbox\" className=\"todoCheck\"></input>\n\t\t\t<p className=\"todoTitle\">example todo</p>\n\t\t\t<button onClick={e => {e.preventDefault()}} className=\"todoButt\">remove item</button>\n\t\t\t</li>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"todoList\">\n\t\t\t<h3>Todo List</h3>\n\t\t\t<ul>\n\t\t\t<TodoItem />\n\t\t\t<TodoItem />\n\t\t\t<TodoItem />\n\t\t\t</ul>\n\t\t\t<button onClick={e => {e.preventDefault()}} className=\"addTodo\">add todo item</button>\n\t\t\t</div>\t\n\t\t);\n\t}\n}","import React, { Component } from 'react';\n\nexport default class Timer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"timer\">\n\t\t\t\t<h3>Time Until Test:</h3>\n\t\t\t\t<h4>14 days 13 hours</h4>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport Timer from './Timer';\n\nexport default class ClassItem extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"classItem\">\n\t\t\t\t<h2>Example Class</h2>\n\t\t\t\t<div className=\"classGrid\">\n\t\t\t\t<Timer />\n\t\t\t\t<TodoList />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\n\nimport NewClassForm from './NewClassForm';\nimport ClassItem from './ClassItem'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n      <h1 className=\"title\">The Finals Countdown</h1>\n      <NewClassForm />\n      <ClassItem />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}