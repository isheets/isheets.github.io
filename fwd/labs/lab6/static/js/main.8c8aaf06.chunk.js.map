{"version":3,"sources":["Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_this$props","this","props","todos","onTodoClick","onButtonClick","react_default","a","createElement","style","width","margin","paddingLeft","listStyle","map","item","index","key","className","type","checked","onChange","textDecoration","value","onClick","e","Component","TodoList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","_ref","setState","state","handleDelete","preventDefault","console","log","length","splice","counter","addTodo","bind","assertThisInitialized","textInput","newTodo","push","_this2","ref","input","Todo_Todo","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8aaf06.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Todo extends Component {\n\n\trender() {\n\n\t\tconst{todos, onTodoClick, onButtonClick} = this.props;\n\n\t\tvar listStyle={\n\t\t\twidth: \"60%\",\n\t\t\tmargin: \"auto\",\n\t\t\tpaddingLeft: \"0\",\n\t\t\tlistStyle: \"none\"\n\t\t}\n\n\n\t\treturn (\n\t\t\t<ul style={listStyle}> \n\t\t\t\t{todos.map((item, index) =>\n\t\t\t\t\t<li key={index} className=\"todoRow\">\n\t\t\t\t\t<input \n\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\tchecked={item.checked} \n\t\t\t\t\tonChange={() => onTodoClick(item)} \n\t\t\t\t\tclassName=\"check\">\n\t\t\t\t\t</input> \n\t\t\t\t\t<div \n\t\t\t\t\tstyle={titleStyle(item.checked)} \n\t\t\t\t\tclassName=\"todoTitle\">\n\t\t\t\t\t{item.value}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button \n\t\t\t\t\tonClick={e => onButtonClick(e, index)}\n\t\t\t\t\tclassName=\"butt\">\n\t\t\t\t\tdelete todo\n\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t)} \n\t\t\t</ul>\n\t\t\t);\n\n\t\tfunction titleStyle(checked) {\n\t\t\treturn {\n\t\t\t\ttextDecoration: checked ? 'line-through' : 'none',\n\t\t\t};\n\t\t}\n\n\n\n\t}\n\n\n}\n","import React, { Component } from 'react';\nimport Todo from './Todo'\n\nexport default class TodoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: [],\n\t\t\tcounter: 0\n\t\t};\n\n\n\t\tthis.addTodo=this.addTodo.bind(this);\n\t}\n\n\n\taddTodo(e) {\n\n\t\te.preventDefault();\n\t\tif (this.textInput.value.length !== 0) {\n\t\t\tconst newTodo = {\n\t\t\t\tvalue: this.textInput.value,\n\t\t\t\tchecked: false\n\t\t\t};\n\n\t\t\tthis.state.todos.push(newTodo);\n\n\t\t\tthis.setState({\n\t\t\t\ttodos: this.state.todos, \n\t\t\t\tcounter: this.state.counter + 1\n\t\t\t});\n\n\t\t\tthis.textInput.value = '';\n\n\t\t}\n\n\t}\n\n  handleItemClick = ({value, checked}) => {\n    this.setState({\n      todos: this.state.todos.map(item => item.value === value ? { value, checked: !checked } : item)\n    });\n  }\n\n  handleDelete = (e, index) => {\n  \te.preventDefault();\n  \tconsole.log(this.state.todos.length);\n  \tconsole.log(\"delete!\" + index);\n\n  \tthis.state.todos.splice(index, 1);\n\n  \tthis.setState({\n  \t\ttodos: this.state.todos,\n  \t\tcounter: this.state.counter - 1\n  \t});\n  \tconsole.log(this.state.todos.length);\n  }\n\n\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"fullTodo\">\n\t\t\t<div className=\"title\">\n\t\t\t<h1>You have {this.state.counter > 0 ? this.state.counter + \" Things To Do\" : \" nothing to do\"} </h1>\n\t\t\t<form>\n\t\t\t<input type=\"text\" ref={input => this.textInput=input}></input>\n\t\t\t<button onClick={this.addTodo}>Add To Do</button>\n\t\t\t</form>\n\t\t\t</div>\n\t\t\t<Todo \n\t\t\ttodos={this.state.todos} \n\t\t\tonTodoClick={this.handleItemClick}\n\t\t\tonButtonClick={this.handleDelete}\n\t\t\t/>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './TodoList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}